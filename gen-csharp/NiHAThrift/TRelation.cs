/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TRelation : TBase
  {
    private string _Neo4jID;
    private string _AoKID;
    private THashSet<string> _Labels;
    private string _RelationType;
    private TNode _SourceNode;
    private TNode _TargetNode;
    private Dictionary<string, TDimension> _Properties;
    private double _AttentionLevel;
    private Dictionary<string, double> _TruthValue;

    public string Neo4jID
    {
      get
      {
        return _Neo4jID;
      }
      set
      {
        __isset.Neo4jID = true;
        this._Neo4jID = value;
      }
    }

    public string AoKID
    {
      get
      {
        return _AoKID;
      }
      set
      {
        __isset.AoKID = true;
        this._AoKID = value;
      }
    }

    public THashSet<string> Labels
    {
      get
      {
        return _Labels;
      }
      set
      {
        __isset.Labels = true;
        this._Labels = value;
      }
    }

    public string RelationType
    {
      get
      {
        return _RelationType;
      }
      set
      {
        __isset.RelationType = true;
        this._RelationType = value;
      }
    }

    public TNode SourceNode
    {
      get
      {
        return _SourceNode;
      }
      set
      {
        __isset.SourceNode = true;
        this._SourceNode = value;
      }
    }

    public TNode TargetNode
    {
      get
      {
        return _TargetNode;
      }
      set
      {
        __isset.TargetNode = true;
        this._TargetNode = value;
      }
    }

    public Dictionary<string, TDimension> Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public double AttentionLevel
    {
      get
      {
        return _AttentionLevel;
      }
      set
      {
        __isset.AttentionLevel = true;
        this._AttentionLevel = value;
      }
    }

    public Dictionary<string, double> TruthValue
    {
      get
      {
        return _TruthValue;
      }
      set
      {
        __isset.TruthValue = true;
        this._TruthValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Neo4jID;
      public bool AoKID;
      public bool Labels;
      public bool RelationType;
      public bool SourceNode;
      public bool TargetNode;
      public bool Properties;
      public bool AttentionLevel;
      public bool TruthValue;
    }

    public TRelation() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Neo4jID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AoKID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  Labels = new THashSet<string>();
                  TSet _set29 = iprot.ReadSetBegin();
                  for( int _i30 = 0; _i30 < _set29.Count; ++_i30)
                  {
                    string _elem31;
                    _elem31 = iprot.ReadString();
                    Labels.Add(_elem31);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                RelationType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                SourceNode = new TNode();
                SourceNode.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                TargetNode = new TNode();
                TargetNode.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, TDimension>();
                  TMap _map32 = iprot.ReadMapBegin();
                  for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                  {
                    string _key34;
                    TDimension _val35;
                    _key34 = iprot.ReadString();
                    _val35 = new TDimension();
                    _val35.Read(iprot);
                    Properties[_key34] = _val35;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                AttentionLevel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Map) {
                {
                  TruthValue = new Dictionary<string, double>();
                  TMap _map36 = iprot.ReadMapBegin();
                  for( int _i37 = 0; _i37 < _map36.Count; ++_i37)
                  {
                    string _key38;
                    double _val39;
                    _key38 = iprot.ReadString();
                    _val39 = iprot.ReadDouble();
                    TruthValue[_key38] = _val39;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TRelation");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Neo4jID != null && __isset.Neo4jID) {
          field.Name = "Neo4jID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Neo4jID);
          oprot.WriteFieldEnd();
        }
        if (AoKID != null && __isset.AoKID) {
          field.Name = "AoKID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AoKID);
          oprot.WriteFieldEnd();
        }
        if (Labels != null && __isset.Labels) {
          field.Name = "Labels";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Labels.Count));
            foreach (string _iter40 in Labels)
            {
              oprot.WriteString(_iter40);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RelationType != null && __isset.RelationType) {
          field.Name = "RelationType";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RelationType);
          oprot.WriteFieldEnd();
        }
        if (SourceNode != null && __isset.SourceNode) {
          field.Name = "SourceNode";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          SourceNode.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TargetNode != null && __isset.TargetNode) {
          field.Name = "TargetNode";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          TargetNode.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.Properties) {
          field.Name = "Properties";
          field.Type = TType.Map;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Properties.Count));
            foreach (string _iter41 in Properties.Keys)
            {
              oprot.WriteString(_iter41);
              Properties[_iter41].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.AttentionLevel) {
          field.Name = "AttentionLevel";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(AttentionLevel);
          oprot.WriteFieldEnd();
        }
        if (TruthValue != null && __isset.TruthValue) {
          field.Name = "TruthValue";
          field.Type = TType.Map;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Double, TruthValue.Count));
            foreach (string _iter42 in TruthValue.Keys)
            {
              oprot.WriteString(_iter42);
              oprot.WriteDouble(TruthValue[_iter42]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TRelation(");
      bool __first = true;
      if (Neo4jID != null && __isset.Neo4jID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Neo4jID: ");
        __sb.Append(Neo4jID);
      }
      if (AoKID != null && __isset.AoKID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AoKID: ");
        __sb.Append(AoKID);
      }
      if (Labels != null && __isset.Labels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Labels: ");
        __sb.Append(Labels);
      }
      if (RelationType != null && __isset.RelationType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RelationType: ");
        __sb.Append(RelationType);
      }
      if (SourceNode != null && __isset.SourceNode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceNode: ");
        __sb.Append(SourceNode== null ? "<null>" : SourceNode.ToString());
      }
      if (TargetNode != null && __isset.TargetNode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TargetNode: ");
        __sb.Append(TargetNode== null ? "<null>" : TargetNode.ToString());
      }
      if (Properties != null && __isset.Properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties);
      }
      if (__isset.AttentionLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttentionLevel: ");
        __sb.Append(AttentionLevel);
      }
      if (TruthValue != null && __isset.TruthValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TruthValue: ");
        __sb.Append(TruthValue);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
