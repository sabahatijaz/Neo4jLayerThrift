/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TMemoryChunk : TBase
  {
    private string _ID;
    private TGraph _Graph;
    private double _AttentionLevel;
    private double _DecayLevel;
    private double _Importance;
    private double _Evaluation;

    public string Neo4jID { get; set; }

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string TimeStamp { get; set; }

    public TGraph Graph
    {
      get
      {
        return _Graph;
      }
      set
      {
        __isset.Graph = true;
        this._Graph = value;
      }
    }

    public short Capacity { get; set; }

    public double AttentionLevel
    {
      get
      {
        return _AttentionLevel;
      }
      set
      {
        __isset.AttentionLevel = true;
        this._AttentionLevel = value;
      }
    }

    public double DecayLevel
    {
      get
      {
        return _DecayLevel;
      }
      set
      {
        __isset.DecayLevel = true;
        this._DecayLevel = value;
      }
    }

    public double Importance
    {
      get
      {
        return _Importance;
      }
      set
      {
        __isset.Importance = true;
        this._Importance = value;
      }
    }

    public double Evaluation
    {
      get
      {
        return _Evaluation;
      }
      set
      {
        __isset.Evaluation = true;
        this._Evaluation = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool Graph;
      public bool AttentionLevel;
      public bool DecayLevel;
      public bool Importance;
      public bool Evaluation;
    }

    public TMemoryChunk() {
    }

    public TMemoryChunk(string Neo4jID, string TimeStamp, short Capacity) : this() {
      this.Neo4jID = Neo4jID;
      this.TimeStamp = TimeStamp;
      this.Capacity = Capacity;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Neo4jID = false;
        bool isset_TimeStamp = false;
        bool isset_Capacity = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Neo4jID = iprot.ReadString();
                isset_Neo4jID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TimeStamp = iprot.ReadString();
                isset_TimeStamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Graph = new TGraph();
                Graph.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I16) {
                Capacity = iprot.ReadI16();
                isset_Capacity = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                AttentionLevel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                DecayLevel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                Importance = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Double) {
                Evaluation = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Neo4jID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Neo4jID not set");
        if (!isset_TimeStamp)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimeStamp not set");
        if (!isset_Capacity)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Capacity not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TMemoryChunk");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Neo4jID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Neo4jID not set");
        field.Name = "Neo4jID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Neo4jID);
        oprot.WriteFieldEnd();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (TimeStamp == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field TimeStamp not set");
        field.Name = "TimeStamp";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TimeStamp);
        oprot.WriteFieldEnd();
        if (Graph != null && __isset.Graph) {
          field.Name = "Graph";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Graph.Write(oprot);
          oprot.WriteFieldEnd();
        }
        field.Name = "Capacity";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Capacity);
        oprot.WriteFieldEnd();
        if (__isset.AttentionLevel) {
          field.Name = "AttentionLevel";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(AttentionLevel);
          oprot.WriteFieldEnd();
        }
        if (__isset.DecayLevel) {
          field.Name = "DecayLevel";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(DecayLevel);
          oprot.WriteFieldEnd();
        }
        if (__isset.Importance) {
          field.Name = "Importance";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Importance);
          oprot.WriteFieldEnd();
        }
        if (__isset.Evaluation) {
          field.Name = "Evaluation";
          field.Type = TType.Double;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Evaluation);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TMemoryChunk(");
      __sb.Append(", Neo4jID: ");
      __sb.Append(Neo4jID);
      if (ID != null && __isset.ID) {
        __sb.Append(", ID: ");
        __sb.Append(ID);
      }
      __sb.Append(", TimeStamp: ");
      __sb.Append(TimeStamp);
      if (Graph != null && __isset.Graph) {
        __sb.Append(", Graph: ");
        __sb.Append(Graph== null ? "<null>" : Graph.ToString());
      }
      __sb.Append(", Capacity: ");
      __sb.Append(Capacity);
      if (__isset.AttentionLevel) {
        __sb.Append(", AttentionLevel: ");
        __sb.Append(AttentionLevel);
      }
      if (__isset.DecayLevel) {
        __sb.Append(", DecayLevel: ");
        __sb.Append(DecayLevel);
      }
      if (__isset.Importance) {
        __sb.Append(", Importance: ");
        __sb.Append(Importance);
      }
      if (__isset.Evaluation) {
        __sb.Append(", Evaluation: ");
        __sb.Append(Evaluation);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
