/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TCognitiveMemory : TBase
  {
    private string _Memory;
    private string _ID;
    private short _Capacity;
    private Dictionary<string, TMemoryChunk> _MemoryChunks;
    private bool _IsDecayable;
    private Dictionary<string, TDimension> _Scratchpad;

    public string Memory
    {
      get
      {
        return _Memory;
      }
      set
      {
        __isset.Memory = true;
        this._Memory = value;
      }
    }

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public short Capacity
    {
      get
      {
        return _Capacity;
      }
      set
      {
        __isset.Capacity = true;
        this._Capacity = value;
      }
    }

    public Dictionary<string, TMemoryChunk> MemoryChunks
    {
      get
      {
        return _MemoryChunks;
      }
      set
      {
        __isset.MemoryChunks = true;
        this._MemoryChunks = value;
      }
    }

    public bool IsDecayable
    {
      get
      {
        return _IsDecayable;
      }
      set
      {
        __isset.IsDecayable = true;
        this._IsDecayable = value;
      }
    }

    public Dictionary<string, TDimension> Scratchpad
    {
      get
      {
        return _Scratchpad;
      }
      set
      {
        __isset.Scratchpad = true;
        this._Scratchpad = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Memory;
      public bool ID;
      public bool Capacity;
      public bool MemoryChunks;
      public bool IsDecayable;
      public bool Scratchpad;
    }

    public TCognitiveMemory() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Memory = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Capacity = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  MemoryChunks = new Dictionary<string, TMemoryChunk>();
                  TMap _map53 = iprot.ReadMapBegin();
                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)
                  {
                    string _key55;
                    TMemoryChunk _val56;
                    _key55 = iprot.ReadString();
                    _val56 = new TMemoryChunk();
                    _val56.Read(iprot);
                    MemoryChunks[_key55] = _val56;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IsDecayable = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Map) {
                {
                  Scratchpad = new Dictionary<string, TDimension>();
                  TMap _map57 = iprot.ReadMapBegin();
                  for( int _i58 = 0; _i58 < _map57.Count; ++_i58)
                  {
                    string _key59;
                    TDimension _val60;
                    _key59 = iprot.ReadString();
                    _val60 = new TDimension();
                    _val60.Read(iprot);
                    Scratchpad[_key59] = _val60;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TCognitiveMemory");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Memory != null && __isset.Memory) {
          field.Name = "Memory";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Memory);
          oprot.WriteFieldEnd();
        }
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (__isset.Capacity) {
          field.Name = "Capacity";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Capacity);
          oprot.WriteFieldEnd();
        }
        if (MemoryChunks != null && __isset.MemoryChunks) {
          field.Name = "MemoryChunks";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, MemoryChunks.Count));
            foreach (string _iter61 in MemoryChunks.Keys)
            {
              oprot.WriteString(_iter61);
              MemoryChunks[_iter61].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.IsDecayable) {
          field.Name = "IsDecayable";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsDecayable);
          oprot.WriteFieldEnd();
        }
        if (Scratchpad != null && __isset.Scratchpad) {
          field.Name = "Scratchpad";
          field.Type = TType.Map;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Scratchpad.Count));
            foreach (string _iter62 in Scratchpad.Keys)
            {
              oprot.WriteString(_iter62);
              Scratchpad[_iter62].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TCognitiveMemory(");
      bool __first = true;
      if (Memory != null && __isset.Memory) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Memory: ");
        __sb.Append(Memory);
      }
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (__isset.Capacity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Capacity: ");
        __sb.Append(Capacity);
      }
      if (MemoryChunks != null && __isset.MemoryChunks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemoryChunks: ");
        __sb.Append(MemoryChunks);
      }
      if (__isset.IsDecayable) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsDecayable: ");
        __sb.Append(IsDecayable);
      }
      if (Scratchpad != null && __isset.Scratchpad) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scratchpad: ");
        __sb.Append(Scratchpad);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
