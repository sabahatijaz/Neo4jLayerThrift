/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TNode : TBase
  {
    private string _Neo4jID;
    private string _Tag;
    private string _Validity;
    private string _ProcessingTag;
    private THashSet<string> _Domains;
    private Dictionary<string, double> _TruthValue;
    private double _Evaluation;
    private string _DateTimeStamp;
    private long _AgeInMilliseconds;
    private double _AttentionLevel;

    public string Neo4jID
    {
      get
      {
        return _Neo4jID;
      }
      set
      {
        __isset.Neo4jID = true;
        this._Neo4jID = value;
      }
    }

    public string AoKID { get; set; }

    public THashSet<string> Labels { get; set; }

    public string Value { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TESystemLevelType"/>
    /// </summary>
    public TESystemLevelType SystemLevelType { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TEAbstractionLevel"/>
    /// </summary>
    public TEAbstractionLevel AbstractionLevel { get; set; }

    public string Tag
    {
      get
      {
        return _Tag;
      }
      set
      {
        __isset.Tag = true;
        this._Tag = value;
      }
    }

    public string Validity
    {
      get
      {
        return _Validity;
      }
      set
      {
        __isset.Validity = true;
        this._Validity = value;
      }
    }

    public string ProcessingTag
    {
      get
      {
        return _ProcessingTag;
      }
      set
      {
        __isset.ProcessingTag = true;
        this._ProcessingTag = value;
      }
    }

    public THashSet<string> Domains
    {
      get
      {
        return _Domains;
      }
      set
      {
        __isset.Domains = true;
        this._Domains = value;
      }
    }

    public Dictionary<string, double> TruthValue
    {
      get
      {
        return _TruthValue;
      }
      set
      {
        __isset.TruthValue = true;
        this._TruthValue = value;
      }
    }

    public double Evaluation
    {
      get
      {
        return _Evaluation;
      }
      set
      {
        __isset.Evaluation = true;
        this._Evaluation = value;
      }
    }

    public string DateTimeStamp
    {
      get
      {
        return _DateTimeStamp;
      }
      set
      {
        __isset.DateTimeStamp = true;
        this._DateTimeStamp = value;
      }
    }

    public long AgeInMilliseconds
    {
      get
      {
        return _AgeInMilliseconds;
      }
      set
      {
        __isset.AgeInMilliseconds = true;
        this._AgeInMilliseconds = value;
      }
    }

    public double AttentionLevel
    {
      get
      {
        return _AttentionLevel;
      }
      set
      {
        __isset.AttentionLevel = true;
        this._AttentionLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Neo4jID;
      public bool Tag;
      public bool Validity;
      public bool ProcessingTag;
      public bool Domains;
      public bool TruthValue;
      public bool Evaluation;
      public bool DateTimeStamp;
      public bool AgeInMilliseconds;
      public bool AttentionLevel;
    }

    public TNode() {
    }

    public TNode(string AoKID, THashSet<string> Labels, string Value, TESystemLevelType SystemLevelType, TEAbstractionLevel AbstractionLevel) : this() {
      this.AoKID = AoKID;
      this.Labels = Labels;
      this.Value = Value;
      this.SystemLevelType = SystemLevelType;
      this.AbstractionLevel = AbstractionLevel;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_AoKID = false;
        bool isset_Labels = false;
        bool isset_Value = false;
        bool isset_SystemLevelType = false;
        bool isset_AbstractionLevel = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Neo4jID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AoKID = iprot.ReadString();
                isset_AoKID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  Labels = new THashSet<string>();
                  TSet _set16 = iprot.ReadSetBegin();
                  for( int _i17 = 0; _i17 < _set16.Count; ++_i17)
                  {
                    string _elem18;
                    _elem18 = iprot.ReadString();
                    Labels.Add(_elem18);
                  }
                  iprot.ReadSetEnd();
                }
                isset_Labels = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
                isset_Value = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                SystemLevelType = (TESystemLevelType)iprot.ReadI32();
                isset_SystemLevelType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                AbstractionLevel = (TEAbstractionLevel)iprot.ReadI32();
                isset_AbstractionLevel = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Tag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Validity = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                ProcessingTag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Set) {
                {
                  Domains = new THashSet<string>();
                  TSet _set19 = iprot.ReadSetBegin();
                  for( int _i20 = 0; _i20 < _set19.Count; ++_i20)
                  {
                    string _elem21;
                    _elem21 = iprot.ReadString();
                    Domains.Add(_elem21);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Map) {
                {
                  TruthValue = new Dictionary<string, double>();
                  TMap _map22 = iprot.ReadMapBegin();
                  for( int _i23 = 0; _i23 < _map22.Count; ++_i23)
                  {
                    string _key24;
                    double _val25;
                    _key24 = iprot.ReadString();
                    _val25 = iprot.ReadDouble();
                    TruthValue[_key24] = _val25;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Double) {
                Evaluation = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                DateTimeStamp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I64) {
                AgeInMilliseconds = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Double) {
                AttentionLevel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_AoKID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AoKID not set");
        if (!isset_Labels)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Labels not set");
        if (!isset_Value)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Value not set");
        if (!isset_SystemLevelType)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SystemLevelType not set");
        if (!isset_AbstractionLevel)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AbstractionLevel not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TNode");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Neo4jID != null && __isset.Neo4jID) {
          field.Name = "Neo4jID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Neo4jID);
          oprot.WriteFieldEnd();
        }
        if (AoKID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AoKID not set");
        field.Name = "AoKID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AoKID);
        oprot.WriteFieldEnd();
        if (Labels == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Labels not set");
        field.Name = "Labels";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Labels.Count));
          foreach (string _iter26 in Labels)
          {
            oprot.WriteString(_iter26);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
        if (Value == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Value not set");
        field.Name = "Value";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Value);
        oprot.WriteFieldEnd();
        field.Name = "SystemLevelType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SystemLevelType);
        oprot.WriteFieldEnd();
        field.Name = "AbstractionLevel";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)AbstractionLevel);
        oprot.WriteFieldEnd();
        if (Tag != null && __isset.Tag) {
          field.Name = "Tag";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tag);
          oprot.WriteFieldEnd();
        }
        if (Validity != null && __isset.Validity) {
          field.Name = "Validity";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Validity);
          oprot.WriteFieldEnd();
        }
        if (ProcessingTag != null && __isset.ProcessingTag) {
          field.Name = "ProcessingTag";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ProcessingTag);
          oprot.WriteFieldEnd();
        }
        if (Domains != null && __isset.Domains) {
          field.Name = "Domains";
          field.Type = TType.Set;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Domains.Count));
            foreach (string _iter27 in Domains)
            {
              oprot.WriteString(_iter27);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TruthValue != null && __isset.TruthValue) {
          field.Name = "TruthValue";
          field.Type = TType.Map;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Double, TruthValue.Count));
            foreach (string _iter28 in TruthValue.Keys)
            {
              oprot.WriteString(_iter28);
              oprot.WriteDouble(TruthValue[_iter28]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.Evaluation) {
          field.Name = "Evaluation";
          field.Type = TType.Double;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Evaluation);
          oprot.WriteFieldEnd();
        }
        if (DateTimeStamp != null && __isset.DateTimeStamp) {
          field.Name = "DateTimeStamp";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DateTimeStamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.AgeInMilliseconds) {
          field.Name = "AgeInMilliseconds";
          field.Type = TType.I64;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AgeInMilliseconds);
          oprot.WriteFieldEnd();
        }
        if (__isset.AttentionLevel) {
          field.Name = "AttentionLevel";
          field.Type = TType.Double;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(AttentionLevel);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TNode(");
      bool __first = true;
      if (Neo4jID != null && __isset.Neo4jID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Neo4jID: ");
        __sb.Append(Neo4jID);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("AoKID: ");
      __sb.Append(AoKID);
      __sb.Append(", Labels: ");
      __sb.Append(Labels);
      __sb.Append(", Value: ");
      __sb.Append(Value);
      __sb.Append(", SystemLevelType: ");
      __sb.Append(SystemLevelType);
      __sb.Append(", AbstractionLevel: ");
      __sb.Append(AbstractionLevel);
      if (Tag != null && __isset.Tag) {
        __sb.Append(", Tag: ");
        __sb.Append(Tag);
      }
      if (Validity != null && __isset.Validity) {
        __sb.Append(", Validity: ");
        __sb.Append(Validity);
      }
      if (ProcessingTag != null && __isset.ProcessingTag) {
        __sb.Append(", ProcessingTag: ");
        __sb.Append(ProcessingTag);
      }
      if (Domains != null && __isset.Domains) {
        __sb.Append(", Domains: ");
        __sb.Append(Domains);
      }
      if (TruthValue != null && __isset.TruthValue) {
        __sb.Append(", TruthValue: ");
        __sb.Append(TruthValue);
      }
      if (__isset.Evaluation) {
        __sb.Append(", Evaluation: ");
        __sb.Append(Evaluation);
      }
      if (DateTimeStamp != null && __isset.DateTimeStamp) {
        __sb.Append(", DateTimeStamp: ");
        __sb.Append(DateTimeStamp);
      }
      if (__isset.AgeInMilliseconds) {
        __sb.Append(", AgeInMilliseconds: ");
        __sb.Append(AgeInMilliseconds);
      }
      if (__isset.AttentionLevel) {
        __sb.Append(", AttentionLevel: ");
        __sb.Append(AttentionLevel);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
