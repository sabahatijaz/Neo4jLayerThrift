/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TGraph : TBase
  {
    private string _Neo4jID;
    private string _ID;
    private Dictionary<string, TNode> _Nodes;
    private Dictionary<string, TRelation> _Relations;
    private TERepresentationType _RepresentationType;

    public string Neo4jID
    {
      get
      {
        return _Neo4jID;
      }
      set
      {
        __isset.Neo4jID = true;
        this._Neo4jID = value;
      }
    }

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public Dictionary<string, TNode> Nodes
    {
      get
      {
        return _Nodes;
      }
      set
      {
        __isset.Nodes = true;
        this._Nodes = value;
      }
    }

    public Dictionary<string, TRelation> Relations
    {
      get
      {
        return _Relations;
      }
      set
      {
        __isset.Relations = true;
        this._Relations = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TERepresentationType"/>
    /// </summary>
    public TERepresentationType RepresentationType
    {
      get
      {
        return _RepresentationType;
      }
      set
      {
        __isset.RepresentationType = true;
        this._RepresentationType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Neo4jID;
      public bool ID;
      public bool Nodes;
      public bool Relations;
      public bool RepresentationType;
    }

    public TGraph() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Neo4jID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Nodes = new Dictionary<string, TNode>();
                  TMap _map43 = iprot.ReadMapBegin();
                  for( int _i44 = 0; _i44 < _map43.Count; ++_i44)
                  {
                    string _key45;
                    TNode _val46;
                    _key45 = iprot.ReadString();
                    _val46 = new TNode();
                    _val46.Read(iprot);
                    Nodes[_key45] = _val46;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  Relations = new Dictionary<string, TRelation>();
                  TMap _map47 = iprot.ReadMapBegin();
                  for( int _i48 = 0; _i48 < _map47.Count; ++_i48)
                  {
                    string _key49;
                    TRelation _val50;
                    _key49 = iprot.ReadString();
                    _val50 = new TRelation();
                    _val50.Read(iprot);
                    Relations[_key49] = _val50;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                RepresentationType = (TERepresentationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TGraph");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Neo4jID != null && __isset.Neo4jID) {
          field.Name = "Neo4jID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Neo4jID);
          oprot.WriteFieldEnd();
        }
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (Nodes != null && __isset.Nodes) {
          field.Name = "Nodes";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Nodes.Count));
            foreach (string _iter51 in Nodes.Keys)
            {
              oprot.WriteString(_iter51);
              Nodes[_iter51].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Relations != null && __isset.Relations) {
          field.Name = "Relations";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Relations.Count));
            foreach (string _iter52 in Relations.Keys)
            {
              oprot.WriteString(_iter52);
              Relations[_iter52].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.RepresentationType) {
          field.Name = "RepresentationType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)RepresentationType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TGraph(");
      bool __first = true;
      if (Neo4jID != null && __isset.Neo4jID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Neo4jID: ");
        __sb.Append(Neo4jID);
      }
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (Nodes != null && __isset.Nodes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Nodes: ");
        __sb.Append(Nodes);
      }
      if (Relations != null && __isset.Relations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Relations: ");
        __sb.Append(Relations);
      }
      if (__isset.RepresentationType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RepresentationType: ");
        __sb.Append(RepresentationType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
