/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{
  public partial class Neo4Niha {
    public interface ISync {
      string createNode(TNode node);
      TNode retrieveById(string neo4jId);
      List<TNode> retrieveNode();
      bool updateNode(TNode node, string neo4Id);
      bool deleteNode(string neo4Id);
      string createRelation(TRelation relation);
      TRelation retrieveByIdRelation(string neo4jId);
      List<TRelation> retrieveRelation();
      bool updateRelation(TRelation relation, string neo4Id);
      bool deleteRelation(string neo4Id);
      string createGraph(TGraph graph);
      TGraph retrieveByIdGraph(string neo4jId);
      TGraph retrieveGraph(string query);
      bool updateGraph(TGraph graph, string neo4Id);
      bool deleteGraph(string neo4Id);
      string createMemoryChunk(TMemoryChunk memoryChunk);
      TMemoryChunk retrieveByIdMemoryChunk(string neo4jId);
      TMemoryChunk retrieveMemoryChunk(string query);
      bool updateMemoryChunk(TMemoryChunk memoryChunk, string neo4Id);
      bool deleteMemoryChunk(string neo4Id);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_createNode(AsyncCallback callback, object state, TNode node);
      string End_createNode(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveById(AsyncCallback callback, object state, string neo4jId);
      TNode End_retrieveById(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveNode(AsyncCallback callback, object state);
      List<TNode> End_retrieveNode(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_updateNode(AsyncCallback callback, object state, TNode node, string neo4Id);
      bool End_updateNode(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_deleteNode(AsyncCallback callback, object state, string neo4Id);
      bool End_deleteNode(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_createRelation(AsyncCallback callback, object state, TRelation relation);
      string End_createRelation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveByIdRelation(AsyncCallback callback, object state, string neo4jId);
      TRelation End_retrieveByIdRelation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveRelation(AsyncCallback callback, object state);
      List<TRelation> End_retrieveRelation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_updateRelation(AsyncCallback callback, object state, TRelation relation, string neo4Id);
      bool End_updateRelation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_deleteRelation(AsyncCallback callback, object state, string neo4Id);
      bool End_deleteRelation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_createGraph(AsyncCallback callback, object state, TGraph graph);
      string End_createGraph(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveByIdGraph(AsyncCallback callback, object state, string neo4jId);
      TGraph End_retrieveByIdGraph(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveGraph(AsyncCallback callback, object state, string query);
      TGraph End_retrieveGraph(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_updateGraph(AsyncCallback callback, object state, TGraph graph, string neo4Id);
      bool End_updateGraph(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_deleteGraph(AsyncCallback callback, object state, string neo4Id);
      bool End_deleteGraph(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_createMemoryChunk(AsyncCallback callback, object state, TMemoryChunk memoryChunk);
      string End_createMemoryChunk(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveByIdMemoryChunk(AsyncCallback callback, object state, string neo4jId);
      TMemoryChunk End_retrieveByIdMemoryChunk(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_retrieveMemoryChunk(AsyncCallback callback, object state, string query);
      TMemoryChunk End_retrieveMemoryChunk(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_updateMemoryChunk(AsyncCallback callback, object state, TMemoryChunk memoryChunk, string neo4Id);
      bool End_updateMemoryChunk(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_deleteMemoryChunk(AsyncCallback callback, object state, string neo4Id);
      bool End_deleteMemoryChunk(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createNode(AsyncCallback callback, object state, TNode node)
      {
        return send_createNode(callback, state, node);
      }

      public string End_createNode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createNode();
      }

      #endif

      public string createNode(TNode node)
      {
        #if !SILVERLIGHT
        send_createNode(node);
        return recv_createNode();

        #else
        var asyncResult = Begin_createNode(null, null, node);
        return End_createNode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createNode(AsyncCallback callback, object state, TNode node)
      #else
      public void send_createNode(TNode node)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createNode", TMessageType.Call, seqid_));
        createNode_args args = new createNode_args();
        args.Node = node;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createNode_result result = new createNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createNode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveById(AsyncCallback callback, object state, string neo4jId)
      {
        return send_retrieveById(callback, state, neo4jId);
      }

      public TNode End_retrieveById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveById();
      }

      #endif

      public TNode retrieveById(string neo4jId)
      {
        #if !SILVERLIGHT
        send_retrieveById(neo4jId);
        return recv_retrieveById();

        #else
        var asyncResult = Begin_retrieveById(null, null, neo4jId);
        return End_retrieveById(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveById(AsyncCallback callback, object state, string neo4jId)
      #else
      public void send_retrieveById(string neo4jId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveById", TMessageType.Call, seqid_));
        retrieveById_args args = new retrieveById_args();
        args.Neo4jId = neo4jId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TNode recv_retrieveById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveById_result result = new retrieveById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveById failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveNode(AsyncCallback callback, object state)
      {
        return send_retrieveNode(callback, state);
      }

      public List<TNode> End_retrieveNode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveNode();
      }

      #endif

      public List<TNode> retrieveNode()
      {
        #if !SILVERLIGHT
        send_retrieveNode();
        return recv_retrieveNode();

        #else
        var asyncResult = Begin_retrieveNode(null, null);
        return End_retrieveNode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveNode(AsyncCallback callback, object state)
      #else
      public void send_retrieveNode()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveNode", TMessageType.Call, seqid_));
        retrieveNode_args args = new retrieveNode_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TNode> recv_retrieveNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveNode_result result = new retrieveNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveNode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateNode(AsyncCallback callback, object state, TNode node, string neo4Id)
      {
        return send_updateNode(callback, state, node, neo4Id);
      }

      public bool End_updateNode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateNode();
      }

      #endif

      public bool updateNode(TNode node, string neo4Id)
      {
        #if !SILVERLIGHT
        send_updateNode(node, neo4Id);
        return recv_updateNode();

        #else
        var asyncResult = Begin_updateNode(null, null, node, neo4Id);
        return End_updateNode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateNode(AsyncCallback callback, object state, TNode node, string neo4Id)
      #else
      public void send_updateNode(TNode node, string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateNode", TMessageType.Call, seqid_));
        updateNode_args args = new updateNode_args();
        args.Node = node;
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_updateNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateNode_result result = new updateNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateNode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteNode(AsyncCallback callback, object state, string neo4Id)
      {
        return send_deleteNode(callback, state, neo4Id);
      }

      public bool End_deleteNode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteNode();
      }

      #endif

      public bool deleteNode(string neo4Id)
      {
        #if !SILVERLIGHT
        send_deleteNode(neo4Id);
        return recv_deleteNode();

        #else
        var asyncResult = Begin_deleteNode(null, null, neo4Id);
        return End_deleteNode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteNode(AsyncCallback callback, object state, string neo4Id)
      #else
      public void send_deleteNode(string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteNode", TMessageType.Call, seqid_));
        deleteNode_args args = new deleteNode_args();
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_deleteNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteNode_result result = new deleteNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteNode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createRelation(AsyncCallback callback, object state, TRelation relation)
      {
        return send_createRelation(callback, state, relation);
      }

      public string End_createRelation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createRelation();
      }

      #endif

      public string createRelation(TRelation relation)
      {
        #if !SILVERLIGHT
        send_createRelation(relation);
        return recv_createRelation();

        #else
        var asyncResult = Begin_createRelation(null, null, relation);
        return End_createRelation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createRelation(AsyncCallback callback, object state, TRelation relation)
      #else
      public void send_createRelation(TRelation relation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createRelation", TMessageType.Call, seqid_));
        createRelation_args args = new createRelation_args();
        args.Relation = relation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createRelation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createRelation_result result = new createRelation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createRelation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveByIdRelation(AsyncCallback callback, object state, string neo4jId)
      {
        return send_retrieveByIdRelation(callback, state, neo4jId);
      }

      public TRelation End_retrieveByIdRelation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveByIdRelation();
      }

      #endif

      public TRelation retrieveByIdRelation(string neo4jId)
      {
        #if !SILVERLIGHT
        send_retrieveByIdRelation(neo4jId);
        return recv_retrieveByIdRelation();

        #else
        var asyncResult = Begin_retrieveByIdRelation(null, null, neo4jId);
        return End_retrieveByIdRelation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveByIdRelation(AsyncCallback callback, object state, string neo4jId)
      #else
      public void send_retrieveByIdRelation(string neo4jId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveByIdRelation", TMessageType.Call, seqid_));
        retrieveByIdRelation_args args = new retrieveByIdRelation_args();
        args.Neo4jId = neo4jId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TRelation recv_retrieveByIdRelation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveByIdRelation_result result = new retrieveByIdRelation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveByIdRelation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveRelation(AsyncCallback callback, object state)
      {
        return send_retrieveRelation(callback, state);
      }

      public List<TRelation> End_retrieveRelation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveRelation();
      }

      #endif

      public List<TRelation> retrieveRelation()
      {
        #if !SILVERLIGHT
        send_retrieveRelation();
        return recv_retrieveRelation();

        #else
        var asyncResult = Begin_retrieveRelation(null, null);
        return End_retrieveRelation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveRelation(AsyncCallback callback, object state)
      #else
      public void send_retrieveRelation()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveRelation", TMessageType.Call, seqid_));
        retrieveRelation_args args = new retrieveRelation_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TRelation> recv_retrieveRelation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveRelation_result result = new retrieveRelation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveRelation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateRelation(AsyncCallback callback, object state, TRelation relation, string neo4Id)
      {
        return send_updateRelation(callback, state, relation, neo4Id);
      }

      public bool End_updateRelation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateRelation();
      }

      #endif

      public bool updateRelation(TRelation relation, string neo4Id)
      {
        #if !SILVERLIGHT
        send_updateRelation(relation, neo4Id);
        return recv_updateRelation();

        #else
        var asyncResult = Begin_updateRelation(null, null, relation, neo4Id);
        return End_updateRelation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateRelation(AsyncCallback callback, object state, TRelation relation, string neo4Id)
      #else
      public void send_updateRelation(TRelation relation, string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateRelation", TMessageType.Call, seqid_));
        updateRelation_args args = new updateRelation_args();
        args.Relation = relation;
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_updateRelation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateRelation_result result = new updateRelation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateRelation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteRelation(AsyncCallback callback, object state, string neo4Id)
      {
        return send_deleteRelation(callback, state, neo4Id);
      }

      public bool End_deleteRelation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteRelation();
      }

      #endif

      public bool deleteRelation(string neo4Id)
      {
        #if !SILVERLIGHT
        send_deleteRelation(neo4Id);
        return recv_deleteRelation();

        #else
        var asyncResult = Begin_deleteRelation(null, null, neo4Id);
        return End_deleteRelation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteRelation(AsyncCallback callback, object state, string neo4Id)
      #else
      public void send_deleteRelation(string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteRelation", TMessageType.Call, seqid_));
        deleteRelation_args args = new deleteRelation_args();
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_deleteRelation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteRelation_result result = new deleteRelation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteRelation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createGraph(AsyncCallback callback, object state, TGraph graph)
      {
        return send_createGraph(callback, state, graph);
      }

      public string End_createGraph(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createGraph();
      }

      #endif

      public string createGraph(TGraph graph)
      {
        #if !SILVERLIGHT
        send_createGraph(graph);
        return recv_createGraph();

        #else
        var asyncResult = Begin_createGraph(null, null, graph);
        return End_createGraph(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createGraph(AsyncCallback callback, object state, TGraph graph)
      #else
      public void send_createGraph(TGraph graph)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createGraph", TMessageType.Call, seqid_));
        createGraph_args args = new createGraph_args();
        args.Graph = graph;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createGraph()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createGraph_result result = new createGraph_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createGraph failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveByIdGraph(AsyncCallback callback, object state, string neo4jId)
      {
        return send_retrieveByIdGraph(callback, state, neo4jId);
      }

      public TGraph End_retrieveByIdGraph(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveByIdGraph();
      }

      #endif

      public TGraph retrieveByIdGraph(string neo4jId)
      {
        #if !SILVERLIGHT
        send_retrieveByIdGraph(neo4jId);
        return recv_retrieveByIdGraph();

        #else
        var asyncResult = Begin_retrieveByIdGraph(null, null, neo4jId);
        return End_retrieveByIdGraph(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveByIdGraph(AsyncCallback callback, object state, string neo4jId)
      #else
      public void send_retrieveByIdGraph(string neo4jId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveByIdGraph", TMessageType.Call, seqid_));
        retrieveByIdGraph_args args = new retrieveByIdGraph_args();
        args.Neo4jId = neo4jId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TGraph recv_retrieveByIdGraph()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveByIdGraph_result result = new retrieveByIdGraph_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveByIdGraph failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveGraph(AsyncCallback callback, object state, string query)
      {
        return send_retrieveGraph(callback, state, query);
      }

      public TGraph End_retrieveGraph(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveGraph();
      }

      #endif

      public TGraph retrieveGraph(string query)
      {
        #if !SILVERLIGHT
        send_retrieveGraph(query);
        return recv_retrieveGraph();

        #else
        var asyncResult = Begin_retrieveGraph(null, null, query);
        return End_retrieveGraph(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveGraph(AsyncCallback callback, object state, string query)
      #else
      public void send_retrieveGraph(string query)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveGraph", TMessageType.Call, seqid_));
        retrieveGraph_args args = new retrieveGraph_args();
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TGraph recv_retrieveGraph()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveGraph_result result = new retrieveGraph_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveGraph failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateGraph(AsyncCallback callback, object state, TGraph graph, string neo4Id)
      {
        return send_updateGraph(callback, state, graph, neo4Id);
      }

      public bool End_updateGraph(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateGraph();
      }

      #endif

      public bool updateGraph(TGraph graph, string neo4Id)
      {
        #if !SILVERLIGHT
        send_updateGraph(graph, neo4Id);
        return recv_updateGraph();

        #else
        var asyncResult = Begin_updateGraph(null, null, graph, neo4Id);
        return End_updateGraph(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateGraph(AsyncCallback callback, object state, TGraph graph, string neo4Id)
      #else
      public void send_updateGraph(TGraph graph, string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateGraph", TMessageType.Call, seqid_));
        updateGraph_args args = new updateGraph_args();
        args.Graph = graph;
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_updateGraph()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateGraph_result result = new updateGraph_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateGraph failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteGraph(AsyncCallback callback, object state, string neo4Id)
      {
        return send_deleteGraph(callback, state, neo4Id);
      }

      public bool End_deleteGraph(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteGraph();
      }

      #endif

      public bool deleteGraph(string neo4Id)
      {
        #if !SILVERLIGHT
        send_deleteGraph(neo4Id);
        return recv_deleteGraph();

        #else
        var asyncResult = Begin_deleteGraph(null, null, neo4Id);
        return End_deleteGraph(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteGraph(AsyncCallback callback, object state, string neo4Id)
      #else
      public void send_deleteGraph(string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteGraph", TMessageType.Call, seqid_));
        deleteGraph_args args = new deleteGraph_args();
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_deleteGraph()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteGraph_result result = new deleteGraph_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteGraph failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createMemoryChunk(AsyncCallback callback, object state, TMemoryChunk memoryChunk)
      {
        return send_createMemoryChunk(callback, state, memoryChunk);
      }

      public string End_createMemoryChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createMemoryChunk();
      }

      #endif

      public string createMemoryChunk(TMemoryChunk memoryChunk)
      {
        #if !SILVERLIGHT
        send_createMemoryChunk(memoryChunk);
        return recv_createMemoryChunk();

        #else
        var asyncResult = Begin_createMemoryChunk(null, null, memoryChunk);
        return End_createMemoryChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createMemoryChunk(AsyncCallback callback, object state, TMemoryChunk memoryChunk)
      #else
      public void send_createMemoryChunk(TMemoryChunk memoryChunk)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createMemoryChunk", TMessageType.Call, seqid_));
        createMemoryChunk_args args = new createMemoryChunk_args();
        args.MemoryChunk = memoryChunk;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createMemoryChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createMemoryChunk_result result = new createMemoryChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createMemoryChunk failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveByIdMemoryChunk(AsyncCallback callback, object state, string neo4jId)
      {
        return send_retrieveByIdMemoryChunk(callback, state, neo4jId);
      }

      public TMemoryChunk End_retrieveByIdMemoryChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveByIdMemoryChunk();
      }

      #endif

      public TMemoryChunk retrieveByIdMemoryChunk(string neo4jId)
      {
        #if !SILVERLIGHT
        send_retrieveByIdMemoryChunk(neo4jId);
        return recv_retrieveByIdMemoryChunk();

        #else
        var asyncResult = Begin_retrieveByIdMemoryChunk(null, null, neo4jId);
        return End_retrieveByIdMemoryChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveByIdMemoryChunk(AsyncCallback callback, object state, string neo4jId)
      #else
      public void send_retrieveByIdMemoryChunk(string neo4jId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveByIdMemoryChunk", TMessageType.Call, seqid_));
        retrieveByIdMemoryChunk_args args = new retrieveByIdMemoryChunk_args();
        args.Neo4jId = neo4jId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMemoryChunk recv_retrieveByIdMemoryChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveByIdMemoryChunk_result result = new retrieveByIdMemoryChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveByIdMemoryChunk failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_retrieveMemoryChunk(AsyncCallback callback, object state, string query)
      {
        return send_retrieveMemoryChunk(callback, state, query);
      }

      public TMemoryChunk End_retrieveMemoryChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_retrieveMemoryChunk();
      }

      #endif

      public TMemoryChunk retrieveMemoryChunk(string query)
      {
        #if !SILVERLIGHT
        send_retrieveMemoryChunk(query);
        return recv_retrieveMemoryChunk();

        #else
        var asyncResult = Begin_retrieveMemoryChunk(null, null, query);
        return End_retrieveMemoryChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_retrieveMemoryChunk(AsyncCallback callback, object state, string query)
      #else
      public void send_retrieveMemoryChunk(string query)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("retrieveMemoryChunk", TMessageType.Call, seqid_));
        retrieveMemoryChunk_args args = new retrieveMemoryChunk_args();
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMemoryChunk recv_retrieveMemoryChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        retrieveMemoryChunk_result result = new retrieveMemoryChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveMemoryChunk failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateMemoryChunk(AsyncCallback callback, object state, TMemoryChunk memoryChunk, string neo4Id)
      {
        return send_updateMemoryChunk(callback, state, memoryChunk, neo4Id);
      }

      public bool End_updateMemoryChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateMemoryChunk();
      }

      #endif

      public bool updateMemoryChunk(TMemoryChunk memoryChunk, string neo4Id)
      {
        #if !SILVERLIGHT
        send_updateMemoryChunk(memoryChunk, neo4Id);
        return recv_updateMemoryChunk();

        #else
        var asyncResult = Begin_updateMemoryChunk(null, null, memoryChunk, neo4Id);
        return End_updateMemoryChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateMemoryChunk(AsyncCallback callback, object state, TMemoryChunk memoryChunk, string neo4Id)
      #else
      public void send_updateMemoryChunk(TMemoryChunk memoryChunk, string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateMemoryChunk", TMessageType.Call, seqid_));
        updateMemoryChunk_args args = new updateMemoryChunk_args();
        args.MemoryChunk = memoryChunk;
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_updateMemoryChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateMemoryChunk_result result = new updateMemoryChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateMemoryChunk failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteMemoryChunk(AsyncCallback callback, object state, string neo4Id)
      {
        return send_deleteMemoryChunk(callback, state, neo4Id);
      }

      public bool End_deleteMemoryChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_deleteMemoryChunk();
      }

      #endif

      public bool deleteMemoryChunk(string neo4Id)
      {
        #if !SILVERLIGHT
        send_deleteMemoryChunk(neo4Id);
        return recv_deleteMemoryChunk();

        #else
        var asyncResult = Begin_deleteMemoryChunk(null, null, neo4Id);
        return End_deleteMemoryChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteMemoryChunk(AsyncCallback callback, object state, string neo4Id)
      #else
      public void send_deleteMemoryChunk(string neo4Id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteMemoryChunk", TMessageType.Call, seqid_));
        deleteMemoryChunk_args args = new deleteMemoryChunk_args();
        args.Neo4Id = neo4Id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_deleteMemoryChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteMemoryChunk_result result = new deleteMemoryChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteMemoryChunk failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["createNode"] = createNode_Process;
        processMap_["retrieveById"] = retrieveById_Process;
        processMap_["retrieveNode"] = retrieveNode_Process;
        processMap_["updateNode"] = updateNode_Process;
        processMap_["deleteNode"] = deleteNode_Process;
        processMap_["createRelation"] = createRelation_Process;
        processMap_["retrieveByIdRelation"] = retrieveByIdRelation_Process;
        processMap_["retrieveRelation"] = retrieveRelation_Process;
        processMap_["updateRelation"] = updateRelation_Process;
        processMap_["deleteRelation"] = deleteRelation_Process;
        processMap_["createGraph"] = createGraph_Process;
        processMap_["retrieveByIdGraph"] = retrieveByIdGraph_Process;
        processMap_["retrieveGraph"] = retrieveGraph_Process;
        processMap_["updateGraph"] = updateGraph_Process;
        processMap_["deleteGraph"] = deleteGraph_Process;
        processMap_["createMemoryChunk"] = createMemoryChunk_Process;
        processMap_["retrieveByIdMemoryChunk"] = retrieveByIdMemoryChunk_Process;
        processMap_["retrieveMemoryChunk"] = retrieveMemoryChunk_Process;
        processMap_["updateMemoryChunk"] = updateMemoryChunk_Process;
        processMap_["deleteMemoryChunk"] = deleteMemoryChunk_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createNode_args args = new createNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createNode_result result = new createNode_result();
        try
        {
          result.Success = iface_.createNode(args.Node);
          oprot.WriteMessageBegin(new TMessage("createNode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createNode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveById_args args = new retrieveById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveById_result result = new retrieveById_result();
        try
        {
          result.Success = iface_.retrieveById(args.Neo4jId);
          oprot.WriteMessageBegin(new TMessage("retrieveById", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveById", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveNode_args args = new retrieveNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveNode_result result = new retrieveNode_result();
        try
        {
          result.Success = iface_.retrieveNode();
          oprot.WriteMessageBegin(new TMessage("retrieveNode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveNode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateNode_args args = new updateNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateNode_result result = new updateNode_result();
        try
        {
          result.Success = iface_.updateNode(args.Node, args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("updateNode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateNode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteNode_args args = new deleteNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteNode_result result = new deleteNode_result();
        try
        {
          result.Success = iface_.deleteNode(args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("deleteNode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteNode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createRelation_args args = new createRelation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createRelation_result result = new createRelation_result();
        try
        {
          result.Success = iface_.createRelation(args.Relation);
          oprot.WriteMessageBegin(new TMessage("createRelation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createRelation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveByIdRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveByIdRelation_args args = new retrieveByIdRelation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveByIdRelation_result result = new retrieveByIdRelation_result();
        try
        {
          result.Success = iface_.retrieveByIdRelation(args.Neo4jId);
          oprot.WriteMessageBegin(new TMessage("retrieveByIdRelation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveByIdRelation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveRelation_args args = new retrieveRelation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveRelation_result result = new retrieveRelation_result();
        try
        {
          result.Success = iface_.retrieveRelation();
          oprot.WriteMessageBegin(new TMessage("retrieveRelation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveRelation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateRelation_args args = new updateRelation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateRelation_result result = new updateRelation_result();
        try
        {
          result.Success = iface_.updateRelation(args.Relation, args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("updateRelation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateRelation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteRelation_args args = new deleteRelation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteRelation_result result = new deleteRelation_result();
        try
        {
          result.Success = iface_.deleteRelation(args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("deleteRelation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteRelation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createGraph_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createGraph_args args = new createGraph_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createGraph_result result = new createGraph_result();
        try
        {
          result.Success = iface_.createGraph(args.Graph);
          oprot.WriteMessageBegin(new TMessage("createGraph", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createGraph", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveByIdGraph_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveByIdGraph_args args = new retrieveByIdGraph_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveByIdGraph_result result = new retrieveByIdGraph_result();
        try
        {
          result.Success = iface_.retrieveByIdGraph(args.Neo4jId);
          oprot.WriteMessageBegin(new TMessage("retrieveByIdGraph", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveByIdGraph", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveGraph_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveGraph_args args = new retrieveGraph_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveGraph_result result = new retrieveGraph_result();
        try
        {
          result.Success = iface_.retrieveGraph(args.Query);
          oprot.WriteMessageBegin(new TMessage("retrieveGraph", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveGraph", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateGraph_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateGraph_args args = new updateGraph_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateGraph_result result = new updateGraph_result();
        try
        {
          result.Success = iface_.updateGraph(args.Graph, args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("updateGraph", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateGraph", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteGraph_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteGraph_args args = new deleteGraph_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteGraph_result result = new deleteGraph_result();
        try
        {
          result.Success = iface_.deleteGraph(args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("deleteGraph", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteGraph", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createMemoryChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createMemoryChunk_args args = new createMemoryChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createMemoryChunk_result result = new createMemoryChunk_result();
        try
        {
          result.Success = iface_.createMemoryChunk(args.MemoryChunk);
          oprot.WriteMessageBegin(new TMessage("createMemoryChunk", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("createMemoryChunk", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveByIdMemoryChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveByIdMemoryChunk_args args = new retrieveByIdMemoryChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveByIdMemoryChunk_result result = new retrieveByIdMemoryChunk_result();
        try
        {
          result.Success = iface_.retrieveByIdMemoryChunk(args.Neo4jId);
          oprot.WriteMessageBegin(new TMessage("retrieveByIdMemoryChunk", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveByIdMemoryChunk", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void retrieveMemoryChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        retrieveMemoryChunk_args args = new retrieveMemoryChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        retrieveMemoryChunk_result result = new retrieveMemoryChunk_result();
        try
        {
          result.Success = iface_.retrieveMemoryChunk(args.Query);
          oprot.WriteMessageBegin(new TMessage("retrieveMemoryChunk", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("retrieveMemoryChunk", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateMemoryChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateMemoryChunk_args args = new updateMemoryChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateMemoryChunk_result result = new updateMemoryChunk_result();
        try
        {
          result.Success = iface_.updateMemoryChunk(args.MemoryChunk, args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("updateMemoryChunk", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateMemoryChunk", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteMemoryChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteMemoryChunk_args args = new deleteMemoryChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteMemoryChunk_result result = new deleteMemoryChunk_result();
        try
        {
          result.Success = iface_.deleteMemoryChunk(args.Neo4Id);
          oprot.WriteMessageBegin(new TMessage("deleteMemoryChunk", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("deleteMemoryChunk", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNode_args : TBase
    {
      private TNode _node;

      public TNode Node
      {
        get
        {
          return _node;
        }
        set
        {
          __isset.node = true;
          this._node = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool node;
      }

      public createNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Node = new TNode();
                  Node.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createNode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Node != null && __isset.node) {
            field.Name = "node";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Node.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNode_args(");
        bool __first = true;
        if (Node != null && __isset.node) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Node: ");
          __sb.Append(Node== null ? "<null>" : Node.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createNode_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createNode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createNode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveById_args : TBase
    {
      private string _neo4jId;

      public string Neo4jId
      {
        get
        {
          return _neo4jId;
        }
        set
        {
          __isset.neo4jId = true;
          this._neo4jId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4jId;
      }

      public retrieveById_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4jId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveById_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4jId != null && __isset.neo4jId) {
            field.Name = "neo4jId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4jId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveById_args(");
        bool __first = true;
        if (Neo4jId != null && __isset.neo4jId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4jId: ");
          __sb.Append(Neo4jId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveById_result : TBase
    {
      private TNode _success;

      public TNode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveById_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TNode();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveById_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveById_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveNode_args : TBase
    {

      public retrieveNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveNode_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveNode_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveNode_result : TBase
    {
      private List<TNode> _success;

      public List<TNode> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<TNode>();
                    TList _list67 = iprot.ReadListBegin();
                    for( int _i68 = 0; _i68 < _list67.Count; ++_i68)
                    {
                      TNode _elem69;
                      _elem69 = new TNode();
                      _elem69.Read(iprot);
                      Success.Add(_elem69);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveNode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (TNode _iter70 in Success)
                {
                  _iter70.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveNode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateNode_args : TBase
    {
      private TNode _node;
      private string _neo4Id;

      public TNode Node
      {
        get
        {
          return _node;
        }
        set
        {
          __isset.node = true;
          this._node = value;
        }
      }

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool node;
        public bool neo4Id;
      }

      public updateNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Node = new TNode();
                  Node.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateNode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Node != null && __isset.node) {
            field.Name = "node";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Node.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateNode_args(");
        bool __first = true;
        if (Node != null && __isset.node) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Node: ");
          __sb.Append(Node== null ? "<null>" : Node.ToString());
        }
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateNode_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public updateNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateNode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateNode_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteNode_args : TBase
    {
      private string _neo4Id;

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4Id;
      }

      public deleteNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteNode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteNode_args(");
        bool __first = true;
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteNode_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteNode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteNode_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createRelation_args : TBase
    {
      private TRelation _relation;

      public TRelation Relation
      {
        get
        {
          return _relation;
        }
        set
        {
          __isset.relation = true;
          this._relation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool relation;
      }

      public createRelation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Relation = new TRelation();
                  Relation.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createRelation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Relation != null && __isset.relation) {
            field.Name = "relation";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Relation.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createRelation_args(");
        bool __first = true;
        if (Relation != null && __isset.relation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Relation: ");
          __sb.Append(Relation== null ? "<null>" : Relation.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createRelation_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createRelation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createRelation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createRelation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveByIdRelation_args : TBase
    {
      private string _neo4jId;

      public string Neo4jId
      {
        get
        {
          return _neo4jId;
        }
        set
        {
          __isset.neo4jId = true;
          this._neo4jId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4jId;
      }

      public retrieveByIdRelation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4jId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveByIdRelation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4jId != null && __isset.neo4jId) {
            field.Name = "neo4jId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4jId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveByIdRelation_args(");
        bool __first = true;
        if (Neo4jId != null && __isset.neo4jId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4jId: ");
          __sb.Append(Neo4jId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveByIdRelation_result : TBase
    {
      private TRelation _success;

      public TRelation Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveByIdRelation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TRelation();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveByIdRelation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveByIdRelation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveRelation_args : TBase
    {

      public retrieveRelation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveRelation_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveRelation_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveRelation_result : TBase
    {
      private List<TRelation> _success;

      public List<TRelation> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveRelation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<TRelation>();
                    TList _list71 = iprot.ReadListBegin();
                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)
                    {
                      TRelation _elem73;
                      _elem73 = new TRelation();
                      _elem73.Read(iprot);
                      Success.Add(_elem73);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveRelation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (TRelation _iter74 in Success)
                {
                  _iter74.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveRelation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateRelation_args : TBase
    {
      private TRelation _relation;
      private string _neo4Id;

      public TRelation Relation
      {
        get
        {
          return _relation;
        }
        set
        {
          __isset.relation = true;
          this._relation = value;
        }
      }

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool relation;
        public bool neo4Id;
      }

      public updateRelation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Relation = new TRelation();
                  Relation.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateRelation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Relation != null && __isset.relation) {
            field.Name = "relation";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Relation.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateRelation_args(");
        bool __first = true;
        if (Relation != null && __isset.relation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Relation: ");
          __sb.Append(Relation== null ? "<null>" : Relation.ToString());
        }
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateRelation_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public updateRelation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateRelation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateRelation_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteRelation_args : TBase
    {
      private string _neo4Id;

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4Id;
      }

      public deleteRelation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteRelation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteRelation_args(");
        bool __first = true;
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteRelation_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteRelation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteRelation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteRelation_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createGraph_args : TBase
    {
      private TGraph _graph;

      public TGraph Graph
      {
        get
        {
          return _graph;
        }
        set
        {
          __isset.graph = true;
          this._graph = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool graph;
      }

      public createGraph_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Graph = new TGraph();
                  Graph.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createGraph_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Graph != null && __isset.graph) {
            field.Name = "graph";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Graph.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createGraph_args(");
        bool __first = true;
        if (Graph != null && __isset.graph) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Graph: ");
          __sb.Append(Graph== null ? "<null>" : Graph.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createGraph_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createGraph_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createGraph_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createGraph_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveByIdGraph_args : TBase
    {
      private string _neo4jId;

      public string Neo4jId
      {
        get
        {
          return _neo4jId;
        }
        set
        {
          __isset.neo4jId = true;
          this._neo4jId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4jId;
      }

      public retrieveByIdGraph_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4jId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveByIdGraph_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4jId != null && __isset.neo4jId) {
            field.Name = "neo4jId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4jId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveByIdGraph_args(");
        bool __first = true;
        if (Neo4jId != null && __isset.neo4jId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4jId: ");
          __sb.Append(Neo4jId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveByIdGraph_result : TBase
    {
      private TGraph _success;

      public TGraph Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveByIdGraph_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TGraph();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveByIdGraph_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveByIdGraph_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveGraph_args : TBase
    {
      private string _query;

      public string Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query;
      }

      public retrieveGraph_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Query = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveGraph_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Query);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveGraph_args(");
        bool __first = true;
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveGraph_result : TBase
    {
      private TGraph _success;

      public TGraph Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveGraph_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TGraph();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveGraph_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveGraph_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGraph_args : TBase
    {
      private TGraph _graph;
      private string _neo4Id;

      public TGraph Graph
      {
        get
        {
          return _graph;
        }
        set
        {
          __isset.graph = true;
          this._graph = value;
        }
      }

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool graph;
        public bool neo4Id;
      }

      public updateGraph_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Graph = new TGraph();
                  Graph.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGraph_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Graph != null && __isset.graph) {
            field.Name = "graph";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Graph.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGraph_args(");
        bool __first = true;
        if (Graph != null && __isset.graph) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Graph: ");
          __sb.Append(Graph== null ? "<null>" : Graph.ToString());
        }
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGraph_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public updateGraph_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateGraph_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateGraph_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteGraph_args : TBase
    {
      private string _neo4Id;

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4Id;
      }

      public deleteGraph_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteGraph_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteGraph_args(");
        bool __first = true;
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteGraph_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteGraph_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteGraph_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteGraph_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createMemoryChunk_args : TBase
    {
      private TMemoryChunk _memoryChunk;

      public TMemoryChunk MemoryChunk
      {
        get
        {
          return _memoryChunk;
        }
        set
        {
          __isset.memoryChunk = true;
          this._memoryChunk = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memoryChunk;
      }

      public createMemoryChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  MemoryChunk = new TMemoryChunk();
                  MemoryChunk.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createMemoryChunk_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemoryChunk != null && __isset.memoryChunk) {
            field.Name = "memoryChunk";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            MemoryChunk.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createMemoryChunk_args(");
        bool __first = true;
        if (MemoryChunk != null && __isset.memoryChunk) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemoryChunk: ");
          __sb.Append(MemoryChunk== null ? "<null>" : MemoryChunk.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createMemoryChunk_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public createMemoryChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("createMemoryChunk_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createMemoryChunk_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveByIdMemoryChunk_args : TBase
    {
      private string _neo4jId;

      public string Neo4jId
      {
        get
        {
          return _neo4jId;
        }
        set
        {
          __isset.neo4jId = true;
          this._neo4jId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4jId;
      }

      public retrieveByIdMemoryChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4jId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveByIdMemoryChunk_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4jId != null && __isset.neo4jId) {
            field.Name = "neo4jId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4jId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveByIdMemoryChunk_args(");
        bool __first = true;
        if (Neo4jId != null && __isset.neo4jId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4jId: ");
          __sb.Append(Neo4jId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveByIdMemoryChunk_result : TBase
    {
      private TMemoryChunk _success;

      public TMemoryChunk Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveByIdMemoryChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TMemoryChunk();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveByIdMemoryChunk_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveByIdMemoryChunk_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveMemoryChunk_args : TBase
    {
      private string _query;

      public string Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query;
      }

      public retrieveMemoryChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Query = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveMemoryChunk_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Query != null && __isset.query) {
            field.Name = "query";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Query);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveMemoryChunk_args(");
        bool __first = true;
        if (Query != null && __isset.query) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Query: ");
          __sb.Append(Query);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class retrieveMemoryChunk_result : TBase
    {
      private TMemoryChunk _success;

      public TMemoryChunk Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public retrieveMemoryChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TMemoryChunk();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("retrieveMemoryChunk_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("retrieveMemoryChunk_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateMemoryChunk_args : TBase
    {
      private TMemoryChunk _memoryChunk;
      private string _neo4Id;

      public TMemoryChunk MemoryChunk
      {
        get
        {
          return _memoryChunk;
        }
        set
        {
          __isset.memoryChunk = true;
          this._memoryChunk = value;
        }
      }

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool memoryChunk;
        public bool neo4Id;
      }

      public updateMemoryChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  MemoryChunk = new TMemoryChunk();
                  MemoryChunk.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateMemoryChunk_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MemoryChunk != null && __isset.memoryChunk) {
            field.Name = "memoryChunk";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            MemoryChunk.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateMemoryChunk_args(");
        bool __first = true;
        if (MemoryChunk != null && __isset.memoryChunk) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MemoryChunk: ");
          __sb.Append(MemoryChunk== null ? "<null>" : MemoryChunk.ToString());
        }
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateMemoryChunk_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public updateMemoryChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateMemoryChunk_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateMemoryChunk_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteMemoryChunk_args : TBase
    {
      private string _neo4Id;

      public string Neo4Id
      {
        get
        {
          return _neo4Id;
        }
        set
        {
          __isset.neo4Id = true;
          this._neo4Id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool neo4Id;
      }

      public deleteMemoryChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Neo4Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteMemoryChunk_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Neo4Id != null && __isset.neo4Id) {
            field.Name = "neo4Id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Neo4Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteMemoryChunk_args(");
        bool __first = true;
        if (Neo4Id != null && __isset.neo4Id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Neo4Id: ");
          __sb.Append(Neo4Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteMemoryChunk_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public deleteMemoryChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("deleteMemoryChunk_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("deleteMemoryChunk_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
