/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TUser : TBase
  {
    private string _UserID;
    private string _UserName;
    private string _AppKey;
    private List<string> _RegisteredDevices;

    public string UserID
    {
      get
      {
        return _UserID;
      }
      set
      {
        __isset.UserID = true;
        this._UserID = value;
      }
    }

    public string UserName
    {
      get
      {
        return _UserName;
      }
      set
      {
        __isset.UserName = true;
        this._UserName = value;
      }
    }

    public string AppKey
    {
      get
      {
        return _AppKey;
      }
      set
      {
        __isset.AppKey = true;
        this._AppKey = value;
      }
    }

    public List<string> RegisteredDevices
    {
      get
      {
        return _RegisteredDevices;
      }
      set
      {
        __isset.RegisteredDevices = true;
        this._RegisteredDevices = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UserID;
      public bool UserName;
      public bool AppKey;
      public bool RegisteredDevices;
    }

    public TUser() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                AppKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  RegisteredDevices = new List<string>();
                  TList _list63 = iprot.ReadListBegin();
                  for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                  {
                    string _elem65;
                    _elem65 = iprot.ReadString();
                    RegisteredDevices.Add(_elem65);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TUser");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserID != null && __isset.UserID) {
          field.Name = "UserID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserID);
          oprot.WriteFieldEnd();
        }
        if (UserName != null && __isset.UserName) {
          field.Name = "UserName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserName);
          oprot.WriteFieldEnd();
        }
        if (AppKey != null && __isset.AppKey) {
          field.Name = "AppKey";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AppKey);
          oprot.WriteFieldEnd();
        }
        if (RegisteredDevices != null && __isset.RegisteredDevices) {
          field.Name = "RegisteredDevices";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, RegisteredDevices.Count));
            foreach (string _iter66 in RegisteredDevices)
            {
              oprot.WriteString(_iter66);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TUser(");
      bool __first = true;
      if (UserID != null && __isset.UserID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserID: ");
        __sb.Append(UserID);
      }
      if (UserName != null && __isset.UserName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserName: ");
        __sb.Append(UserName);
      }
      if (AppKey != null && __isset.AppKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppKey: ");
        __sb.Append(AppKey);
      }
      if (RegisteredDevices != null && __isset.RegisteredDevices) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegisteredDevices: ");
        __sb.Append(RegisteredDevices);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
