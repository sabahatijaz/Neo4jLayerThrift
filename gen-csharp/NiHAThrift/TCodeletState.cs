/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TCodeletState : TBase
  {
    private double _Activation;
    private int _EnableCount;
    private bool _Enabled;
    private bool _HasStarted;
    private bool _IsActive;
    private bool _IsLoop;
    private long _LastStartTime;
    private string _Name;
    private bool _ShouldLoop;
    private string _ThreadName;
    private double _Threshold;
    private long _TimeStep;
    private double _AttentionPriorityLevel;
    private double _AttentionLevel;

    public double Activation
    {
      get
      {
        return _Activation;
      }
      set
      {
        __isset.Activation = true;
        this._Activation = value;
      }
    }

    public int EnableCount
    {
      get
      {
        return _EnableCount;
      }
      set
      {
        __isset.EnableCount = true;
        this._EnableCount = value;
      }
    }

    public bool Enabled
    {
      get
      {
        return _Enabled;
      }
      set
      {
        __isset.Enabled = true;
        this._Enabled = value;
      }
    }

    public bool HasStarted
    {
      get
      {
        return _HasStarted;
      }
      set
      {
        __isset.HasStarted = true;
        this._HasStarted = value;
      }
    }

    public bool IsActive
    {
      get
      {
        return _IsActive;
      }
      set
      {
        __isset.IsActive = true;
        this._IsActive = value;
      }
    }

    public bool IsLoop
    {
      get
      {
        return _IsLoop;
      }
      set
      {
        __isset.IsLoop = true;
        this._IsLoop = value;
      }
    }

    public long LastStartTime
    {
      get
      {
        return _LastStartTime;
      }
      set
      {
        __isset.LastStartTime = true;
        this._LastStartTime = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public bool ShouldLoop
    {
      get
      {
        return _ShouldLoop;
      }
      set
      {
        __isset.ShouldLoop = true;
        this._ShouldLoop = value;
      }
    }

    public string ThreadName
    {
      get
      {
        return _ThreadName;
      }
      set
      {
        __isset.ThreadName = true;
        this._ThreadName = value;
      }
    }

    public double Threshold
    {
      get
      {
        return _Threshold;
      }
      set
      {
        __isset.Threshold = true;
        this._Threshold = value;
      }
    }

    public long TimeStep
    {
      get
      {
        return _TimeStep;
      }
      set
      {
        __isset.TimeStep = true;
        this._TimeStep = value;
      }
    }

    public double AttentionPriorityLevel
    {
      get
      {
        return _AttentionPriorityLevel;
      }
      set
      {
        __isset.AttentionPriorityLevel = true;
        this._AttentionPriorityLevel = value;
      }
    }

    public double AttentionLevel
    {
      get
      {
        return _AttentionLevel;
      }
      set
      {
        __isset.AttentionLevel = true;
        this._AttentionLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Activation;
      public bool EnableCount;
      public bool Enabled;
      public bool HasStarted;
      public bool IsActive;
      public bool IsLoop;
      public bool LastStartTime;
      public bool Name;
      public bool ShouldLoop;
      public bool ThreadName;
      public bool Threshold;
      public bool TimeStep;
      public bool AttentionPriorityLevel;
      public bool AttentionLevel;
    }

    public TCodeletState() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Activation = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                EnableCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Enabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                HasStarted = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IsActive = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                IsLoop = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                LastStartTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                ShouldLoop = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                ThreadName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Double) {
                Threshold = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                TimeStep = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Double) {
                AttentionPriorityLevel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Double) {
                AttentionLevel = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TCodeletState");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Activation) {
          field.Name = "Activation";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Activation);
          oprot.WriteFieldEnd();
        }
        if (__isset.EnableCount) {
          field.Name = "EnableCount";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(EnableCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.Enabled) {
          field.Name = "Enabled";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enabled);
          oprot.WriteFieldEnd();
        }
        if (__isset.HasStarted) {
          field.Name = "HasStarted";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(HasStarted);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsActive) {
          field.Name = "IsActive";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsActive);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsLoop) {
          field.Name = "IsLoop";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsLoop);
          oprot.WriteFieldEnd();
        }
        if (__isset.LastStartTime) {
          field.Name = "LastStartTime";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastStartTime);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.ShouldLoop) {
          field.Name = "ShouldLoop";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ShouldLoop);
          oprot.WriteFieldEnd();
        }
        if (ThreadName != null && __isset.ThreadName) {
          field.Name = "ThreadName";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ThreadName);
          oprot.WriteFieldEnd();
        }
        if (__isset.Threshold) {
          field.Name = "Threshold";
          field.Type = TType.Double;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Threshold);
          oprot.WriteFieldEnd();
        }
        if (__isset.TimeStep) {
          field.Name = "TimeStep";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeStep);
          oprot.WriteFieldEnd();
        }
        if (__isset.AttentionPriorityLevel) {
          field.Name = "AttentionPriorityLevel";
          field.Type = TType.Double;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(AttentionPriorityLevel);
          oprot.WriteFieldEnd();
        }
        if (__isset.AttentionLevel) {
          field.Name = "AttentionLevel";
          field.Type = TType.Double;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(AttentionLevel);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TCodeletState(");
      bool __first = true;
      if (__isset.Activation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Activation: ");
        __sb.Append(Activation);
      }
      if (__isset.EnableCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EnableCount: ");
        __sb.Append(EnableCount);
      }
      if (__isset.Enabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Enabled: ");
        __sb.Append(Enabled);
      }
      if (__isset.HasStarted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasStarted: ");
        __sb.Append(HasStarted);
      }
      if (__isset.IsActive) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsActive: ");
        __sb.Append(IsActive);
      }
      if (__isset.IsLoop) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLoop: ");
        __sb.Append(IsLoop);
      }
      if (__isset.LastStartTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastStartTime: ");
        __sb.Append(LastStartTime);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.ShouldLoop) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ShouldLoop: ");
        __sb.Append(ShouldLoop);
      }
      if (ThreadName != null && __isset.ThreadName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThreadName: ");
        __sb.Append(ThreadName);
      }
      if (__isset.Threshold) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Threshold: ");
        __sb.Append(Threshold);
      }
      if (__isset.TimeStep) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeStep: ");
        __sb.Append(TimeStep);
      }
      if (__isset.AttentionPriorityLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttentionPriorityLevel: ");
        __sb.Append(AttentionPriorityLevel);
      }
      if (__isset.AttentionLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttentionLevel: ");
        __sb.Append(AttentionLevel);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
