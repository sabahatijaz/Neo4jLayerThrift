/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TFile : TBase
  {

    public string FilePath { get; set; }

    public string FileType { get; set; }

    public TFile() {
    }

    public TFile(string FilePath, string FileType) : this() {
      this.FilePath = FilePath;
      this.FileType = FileType;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_FilePath = false;
        bool isset_FileType = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FilePath = iprot.ReadString();
                isset_FilePath = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileType = iprot.ReadString();
                isset_FileType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_FilePath)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FilePath not set");
        if (!isset_FileType)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FileType not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TFile");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FilePath == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FilePath not set");
        field.Name = "FilePath";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FilePath);
        oprot.WriteFieldEnd();
        if (FileType == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FileType not set");
        field.Name = "FileType";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileType);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TFile(");
      __sb.Append(", FilePath: ");
      __sb.Append(FilePath);
      __sb.Append(", FileType: ");
      __sb.Append(FileType);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
