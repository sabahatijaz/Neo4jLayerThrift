/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NiHAThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TDimension : TBase
  {
    private string _Neo4jID;

    public string Neo4jID
    {
      get
      {
        return _Neo4jID;
      }
      set
      {
        __isset.Neo4jID = true;
        this._Neo4jID = value;
      }
    }

    public string Name { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TESystemLevelType"/>
    /// </summary>
    public TESystemLevelType SystemLevelType { get; set; }

    public string Value { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Neo4jID;
    }

    public TDimension() {
    }

    public TDimension(string Name, TESystemLevelType SystemLevelType, string Value) : this() {
      this.Name = Name;
      this.SystemLevelType = SystemLevelType;
      this.Value = Value;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Name = false;
        bool isset_SystemLevelType = false;
        bool isset_Value = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Neo4jID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_Name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                SystemLevelType = (TESystemLevelType)iprot.ReadI32();
                isset_SystemLevelType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
                isset_Value = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_SystemLevelType)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SystemLevelType not set");
        if (!isset_Value)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Value not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TDimension");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Neo4jID != null && __isset.Neo4jID) {
          field.Name = "Neo4jID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Neo4jID);
          oprot.WriteFieldEnd();
        }
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        field.Name = "SystemLevelType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SystemLevelType);
        oprot.WriteFieldEnd();
        if (Value == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Value not set");
        field.Name = "Value";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Value);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TDimension(");
      bool __first = true;
      if (Neo4jID != null && __isset.Neo4jID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Neo4jID: ");
        __sb.Append(Neo4jID);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("Name: ");
      __sb.Append(Name);
      __sb.Append(", SystemLevelType: ");
      __sb.Append(SystemLevelType);
      __sb.Append(", Value: ");
      __sb.Append(Value);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
