#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TESystemLevelType(object):
    INT16 = 0
    INT32 = 1
    INT64 = 2
    DOUBLE = 3
    BOOL = 4
    STRING = 5
    DATETIME = 6
    IMAGE = 7
    AUDIO = 8
    VIDEO = 9
    GRAPH = 10
    DATAFILE = 11
    DATASOURCE = 12

    _VALUES_TO_NAMES = {
        0: "INT16",
        1: "INT32",
        2: "INT64",
        3: "DOUBLE",
        4: "BOOL",
        5: "STRING",
        6: "DATETIME",
        7: "IMAGE",
        8: "AUDIO",
        9: "VIDEO",
        10: "GRAPH",
        11: "DATAFILE",
        12: "DATASOURCE",
    }

    _NAMES_TO_VALUES = {
        "INT16": 0,
        "INT32": 1,
        "INT64": 2,
        "DOUBLE": 3,
        "BOOL": 4,
        "STRING": 5,
        "DATETIME": 6,
        "IMAGE": 7,
        "AUDIO": 8,
        "VIDEO": 9,
        "GRAPH": 10,
        "DATAFILE": 11,
        "DATASOURCE": 12,
    }


class TEAbstractionLevel(object):
    SEMANTIC_NODE = 0
    CONCEPT_NODE = 1
    INSTANCE_NODE = 2

    _VALUES_TO_NAMES = {
        0: "SEMANTIC_NODE",
        1: "CONCEPT_NODE",
        2: "INSTANCE_NODE",
    }

    _NAMES_TO_VALUES = {
        "SEMANTIC_NODE": 0,
        "CONCEPT_NODE": 1,
        "INSTANCE_NODE": 2,
    }


class TERepresentationType(object):
    SEMANTIC_NETWORK = 0
    CONCEPTUAL_GRAPH = 1

    _VALUES_TO_NAMES = {
        0: "SEMANTIC_NETWORK",
        1: "CONCEPTUAL_GRAPH",
    }

    _NAMES_TO_VALUES = {
        "SEMANTIC_NETWORK": 0,
        "CONCEPTUAL_GRAPH": 1,
    }


class TESiginStatus(object):
    SIGNIN_SUCCESSFUL = 0
    SIGNIN_NOT_SUCCESSFUL = 1
    SIGNOUT_SUCCESSFUL = 2
    SIGNOUT_NOT_SUCCESSFUL = 3

    _VALUES_TO_NAMES = {
        0: "SIGNIN_SUCCESSFUL",
        1: "SIGNIN_NOT_SUCCESSFUL",
        2: "SIGNOUT_SUCCESSFUL",
        3: "SIGNOUT_NOT_SUCCESSFUL",
    }

    _NAMES_TO_VALUES = {
        "SIGNIN_SUCCESSFUL": 0,
        "SIGNIN_NOT_SUCCESSFUL": 1,
        "SIGNOUT_SUCCESSFUL": 2,
        "SIGNOUT_NOT_SUCCESSFUL": 3,
    }


class TEGraphComponent(object):
    Node = 0
    Relation = 1
    Graph = 2

    _VALUES_TO_NAMES = {
        0: "Node",
        1: "Relation",
        2: "Graph",
    }

    _NAMES_TO_VALUES = {
        "Node": 0,
        "Relation": 1,
        "Graph": 2,
    }


class TUser(object):
    """
    Attributes:
     - UserID
     - UserName
     - AppKey
     - RegisteredDevices
    """


    def __init__(self, UserID=None, UserName=None, AppKey=None, RegisteredDevices=None,):
        self.UserID = UserID
        self.UserName = UserName
        self.AppKey = AppKey
        self.RegisteredDevices = RegisteredDevices

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.UserID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.UserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.AppKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.RegisteredDevices = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.RegisteredDevices.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TUser')
        if self.UserID is not None:
            oprot.writeFieldBegin('UserID', TType.STRING, 1)
            oprot.writeString(self.UserID.encode('utf-8') if sys.version_info[0] == 2 else self.UserID)
            oprot.writeFieldEnd()
        if self.UserName is not None:
            oprot.writeFieldBegin('UserName', TType.STRING, 2)
            oprot.writeString(self.UserName.encode('utf-8') if sys.version_info[0] == 2 else self.UserName)
            oprot.writeFieldEnd()
        if self.AppKey is not None:
            oprot.writeFieldBegin('AppKey', TType.STRING, 3)
            oprot.writeString(self.AppKey.encode('utf-8') if sys.version_info[0] == 2 else self.AppKey)
            oprot.writeFieldEnd()
        if self.RegisteredDevices is not None:
            oprot.writeFieldBegin('RegisteredDevices', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.RegisteredDevices))
            for iter6 in self.RegisteredDevices:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TEndPoint(object):
    """
    Attributes:
     - Host
     - Port
     - NodeName
    """


    def __init__(self, Host=None, Port=None, NodeName=None,):
        self.Host = Host
        self.Port = Port
        self.NodeName = NodeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.NodeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TEndPoint')
        if self.Host is not None:
            oprot.writeFieldBegin('Host', TType.STRING, 1)
            oprot.writeString(self.Host.encode('utf-8') if sys.version_info[0] == 2 else self.Host)
            oprot.writeFieldEnd()
        if self.Port is not None:
            oprot.writeFieldBegin('Port', TType.I32, 2)
            oprot.writeI32(self.Port)
            oprot.writeFieldEnd()
        if self.NodeName is not None:
            oprot.writeFieldBegin('NodeName', TType.STRING, 3)
            oprot.writeString(self.NodeName.encode('utf-8') if sys.version_info[0] == 2 else self.NodeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Host is None:
            raise TProtocolException(message='Required field Host is unset!')
        if self.Port is None:
            raise TProtocolException(message='Required field Port is unset!')
        if self.NodeName is None:
            raise TProtocolException(message='Required field NodeName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TNode(object):
    """
    Attributes:
     - Neo4jID
     - GraphID
     - AoKID
     - SubjectSpecializationOf
     - NameLabels
     - SystemLevelType
     - AbstractionLevel
     - Validity
     - TruthValue
     - Evaluation
     - DateTimeStamp
     - AgeInMilliseconds
     - AttentionLevel
     - ScratchPad
     - SignedInUser
     - HasUserCreatedTheNode
     - Type
    """


    def __init__(self, Neo4jID=None, GraphID=None, AoKID=None, SubjectSpecializationOf=None, NameLabels=None, SystemLevelType=None, AbstractionLevel=None, Validity=None, TruthValue=None, Evaluation=None, DateTimeStamp=None, AgeInMilliseconds=None, AttentionLevel=None, ScratchPad=None, SignedInUser=None, HasUserCreatedTheNode=None, Type=None,):
        self.Neo4jID = Neo4jID
        self.GraphID = GraphID
        self.AoKID = AoKID
        self.SubjectSpecializationOf = SubjectSpecializationOf
        self.NameLabels = NameLabels
        self.SystemLevelType = SystemLevelType
        self.AbstractionLevel = AbstractionLevel
        self.Validity = Validity
        self.TruthValue = TruthValue
        self.Evaluation = Evaluation
        self.DateTimeStamp = DateTimeStamp
        self.AgeInMilliseconds = AgeInMilliseconds
        self.AttentionLevel = AttentionLevel
        self.ScratchPad = ScratchPad
        self.SignedInUser = SignedInUser
        self.HasUserCreatedTheNode = HasUserCreatedTheNode
        self.Type = Type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.GraphID = set()
                    (_etype10, _size7) = iprot.readSetBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.GraphID.add(_elem12)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.AoKID = set()
                    (_etype16, _size13) = iprot.readSetBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.AoKID.add(_elem18)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.SubjectSpecializationOf = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.SubjectSpecializationOf.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.NameLabels = set()
                    (_etype28, _size25) = iprot.readSetBegin()
                    for _i29 in range(_size25):
                        _elem30 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.NameLabels.add(_elem30)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.SystemLevelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.AbstractionLevel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.Validity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.TruthValue = {}
                    (_ktype32, _vtype33, _size31) = iprot.readMapBegin()
                    for _i35 in range(_size31):
                        _key36 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val37 = iprot.readDouble()
                        self.TruthValue[_key36] = _val37
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.Evaluation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.DateTimeStamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.AgeInMilliseconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.MAP:
                    self.ScratchPad = {}
                    (_ktype39, _vtype40, _size38) = iprot.readMapBegin()
                    for _i42 in range(_size38):
                        _key43 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val44 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ScratchPad[_key43] = _val44
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.SignedInUser = TUser()
                    self.SignedInUser.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.HasUserCreatedTheNode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.MAP:
                    self.Type = {}
                    (_ktype46, _vtype47, _size45) = iprot.readMapBegin()
                    for _i49 in range(_size45):
                        _key50 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val51 = set()
                        (_etype55, _size52) = iprot.readSetBegin()
                        for _i56 in range(_size52):
                            _elem57 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val51.add(_elem57)
                        iprot.readSetEnd()
                        self.Type[_key50] = _val51
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TNode')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.GraphID is not None:
            oprot.writeFieldBegin('GraphID', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.GraphID))
            for iter58 in self.GraphID:
                oprot.writeString(iter58.encode('utf-8') if sys.version_info[0] == 2 else iter58)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.AoKID is not None:
            oprot.writeFieldBegin('AoKID', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.AoKID))
            for iter59 in self.AoKID:
                oprot.writeString(iter59.encode('utf-8') if sys.version_info[0] == 2 else iter59)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.SubjectSpecializationOf is not None:
            oprot.writeFieldBegin('SubjectSpecializationOf', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.SubjectSpecializationOf))
            for iter60 in self.SubjectSpecializationOf:
                oprot.writeString(iter60.encode('utf-8') if sys.version_info[0] == 2 else iter60)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.NameLabels is not None:
            oprot.writeFieldBegin('NameLabels', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.NameLabels))
            for iter61 in self.NameLabels:
                oprot.writeString(iter61.encode('utf-8') if sys.version_info[0] == 2 else iter61)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.SystemLevelType is not None:
            oprot.writeFieldBegin('SystemLevelType', TType.I32, 6)
            oprot.writeI32(self.SystemLevelType)
            oprot.writeFieldEnd()
        if self.AbstractionLevel is not None:
            oprot.writeFieldBegin('AbstractionLevel', TType.I32, 7)
            oprot.writeI32(self.AbstractionLevel)
            oprot.writeFieldEnd()
        if self.Validity is not None:
            oprot.writeFieldBegin('Validity', TType.STRING, 8)
            oprot.writeString(self.Validity.encode('utf-8') if sys.version_info[0] == 2 else self.Validity)
            oprot.writeFieldEnd()
        if self.TruthValue is not None:
            oprot.writeFieldBegin('TruthValue', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.TruthValue))
            for kiter62, viter63 in self.TruthValue.items():
                oprot.writeString(kiter62.encode('utf-8') if sys.version_info[0] == 2 else kiter62)
                oprot.writeDouble(viter63)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Evaluation is not None:
            oprot.writeFieldBegin('Evaluation', TType.DOUBLE, 10)
            oprot.writeDouble(self.Evaluation)
            oprot.writeFieldEnd()
        if self.DateTimeStamp is not None:
            oprot.writeFieldBegin('DateTimeStamp', TType.STRING, 11)
            oprot.writeString(self.DateTimeStamp.encode('utf-8') if sys.version_info[0] == 2 else self.DateTimeStamp)
            oprot.writeFieldEnd()
        if self.AgeInMilliseconds is not None:
            oprot.writeFieldBegin('AgeInMilliseconds', TType.I64, 12)
            oprot.writeI64(self.AgeInMilliseconds)
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 13)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        if self.ScratchPad is not None:
            oprot.writeFieldBegin('ScratchPad', TType.MAP, 14)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ScratchPad))
            for kiter64, viter65 in self.ScratchPad.items():
                oprot.writeString(kiter64.encode('utf-8') if sys.version_info[0] == 2 else kiter64)
                oprot.writeString(viter65.encode('utf-8') if sys.version_info[0] == 2 else viter65)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.SignedInUser is not None:
            oprot.writeFieldBegin('SignedInUser', TType.STRUCT, 15)
            self.SignedInUser.write(oprot)
            oprot.writeFieldEnd()
        if self.HasUserCreatedTheNode is not None:
            oprot.writeFieldBegin('HasUserCreatedTheNode', TType.BOOL, 16)
            oprot.writeBool(self.HasUserCreatedTheNode)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.MAP, 17)
            oprot.writeMapBegin(TType.STRING, TType.SET, len(self.Type))
            for kiter66, viter67 in self.Type.items():
                oprot.writeString(kiter66.encode('utf-8') if sys.version_info[0] == 2 else kiter66)
                oprot.writeSetBegin(TType.STRING, len(viter67))
                for iter68 in viter67:
                    oprot.writeString(iter68.encode('utf-8') if sys.version_info[0] == 2 else iter68)
                oprot.writeSetEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.GraphID is None:
            raise TProtocolException(message='Required field GraphID is unset!')
        if self.AoKID is None:
            raise TProtocolException(message='Required field AoKID is unset!')
        if self.SubjectSpecializationOf is None:
            raise TProtocolException(message='Required field SubjectSpecializationOf is unset!')
        if self.NameLabels is None:
            raise TProtocolException(message='Required field NameLabels is unset!')
        if self.SystemLevelType is None:
            raise TProtocolException(message='Required field SystemLevelType is unset!')
        if self.AbstractionLevel is None:
            raise TProtocolException(message='Required field AbstractionLevel is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TRelation(object):
    """
    Attributes:
     - Neo4jID
     - GraphID
     - AoKID
     - SubjectSpecializationOf
     - NameLabels
     - RelationType
     - SourceNode
     - TargetNode
     - AttentionLevel
     - TruthValue
     - ScratchPad
     - DateTimeStamp
     - AgeInMilliseconds
     - SignedInUser
     - HasUserCreatedTheRelation
     - Type
    """


    def __init__(self, Neo4jID=None, GraphID=None, AoKID=None, SubjectSpecializationOf=None, NameLabels=None, RelationType=None, SourceNode=None, TargetNode=None, AttentionLevel=None, TruthValue=None, ScratchPad=None, DateTimeStamp=None, AgeInMilliseconds=None, SignedInUser=None, HasUserCreatedTheRelation=None, Type=None,):
        self.Neo4jID = Neo4jID
        self.GraphID = GraphID
        self.AoKID = AoKID
        self.SubjectSpecializationOf = SubjectSpecializationOf
        self.NameLabels = NameLabels
        self.RelationType = RelationType
        self.SourceNode = SourceNode
        self.TargetNode = TargetNode
        self.AttentionLevel = AttentionLevel
        self.TruthValue = TruthValue
        self.ScratchPad = ScratchPad
        self.DateTimeStamp = DateTimeStamp
        self.AgeInMilliseconds = AgeInMilliseconds
        self.SignedInUser = SignedInUser
        self.HasUserCreatedTheRelation = HasUserCreatedTheRelation
        self.Type = Type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.GraphID = set()
                    (_etype72, _size69) = iprot.readSetBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.GraphID.add(_elem74)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.AoKID = set()
                    (_etype78, _size75) = iprot.readSetBegin()
                    for _i79 in range(_size75):
                        _elem80 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.AoKID.add(_elem80)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.SubjectSpecializationOf = []
                    (_etype84, _size81) = iprot.readListBegin()
                    for _i85 in range(_size81):
                        _elem86 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.SubjectSpecializationOf.append(_elem86)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.NameLabels = set()
                    (_etype90, _size87) = iprot.readSetBegin()
                    for _i91 in range(_size87):
                        _elem92 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.NameLabels.add(_elem92)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.RelationType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.SourceNode = TNode()
                    self.SourceNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.TargetNode = TNode()
                    self.TargetNode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.AttentionLevel = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.TruthValue = {}
                    (_ktype94, _vtype95, _size93) = iprot.readMapBegin()
                    for _i97 in range(_size93):
                        _key98 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val99 = iprot.readDouble()
                        self.TruthValue[_key98] = _val99
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.ScratchPad = {}
                    (_ktype101, _vtype102, _size100) = iprot.readMapBegin()
                    for _i104 in range(_size100):
                        _key105 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val106 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ScratchPad[_key105] = _val106
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.DateTimeStamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.AgeInMilliseconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.SignedInUser = TUser()
                    self.SignedInUser.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.HasUserCreatedTheRelation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.SET:
                    self.Type = set()
                    (_etype110, _size107) = iprot.readSetBegin()
                    for _i111 in range(_size107):
                        _elem112 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Type.add(_elem112)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TRelation')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.GraphID is not None:
            oprot.writeFieldBegin('GraphID', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.GraphID))
            for iter113 in self.GraphID:
                oprot.writeString(iter113.encode('utf-8') if sys.version_info[0] == 2 else iter113)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.AoKID is not None:
            oprot.writeFieldBegin('AoKID', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.AoKID))
            for iter114 in self.AoKID:
                oprot.writeString(iter114.encode('utf-8') if sys.version_info[0] == 2 else iter114)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.SubjectSpecializationOf is not None:
            oprot.writeFieldBegin('SubjectSpecializationOf', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.SubjectSpecializationOf))
            for iter115 in self.SubjectSpecializationOf:
                oprot.writeString(iter115.encode('utf-8') if sys.version_info[0] == 2 else iter115)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.NameLabels is not None:
            oprot.writeFieldBegin('NameLabels', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.NameLabels))
            for iter116 in self.NameLabels:
                oprot.writeString(iter116.encode('utf-8') if sys.version_info[0] == 2 else iter116)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.RelationType is not None:
            oprot.writeFieldBegin('RelationType', TType.STRING, 6)
            oprot.writeString(self.RelationType.encode('utf-8') if sys.version_info[0] == 2 else self.RelationType)
            oprot.writeFieldEnd()
        if self.SourceNode is not None:
            oprot.writeFieldBegin('SourceNode', TType.STRUCT, 7)
            self.SourceNode.write(oprot)
            oprot.writeFieldEnd()
        if self.TargetNode is not None:
            oprot.writeFieldBegin('TargetNode', TType.STRUCT, 8)
            self.TargetNode.write(oprot)
            oprot.writeFieldEnd()
        if self.AttentionLevel is not None:
            oprot.writeFieldBegin('AttentionLevel', TType.DOUBLE, 9)
            oprot.writeDouble(self.AttentionLevel)
            oprot.writeFieldEnd()
        if self.TruthValue is not None:
            oprot.writeFieldBegin('TruthValue', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.TruthValue))
            for kiter117, viter118 in self.TruthValue.items():
                oprot.writeString(kiter117.encode('utf-8') if sys.version_info[0] == 2 else kiter117)
                oprot.writeDouble(viter118)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.ScratchPad is not None:
            oprot.writeFieldBegin('ScratchPad', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ScratchPad))
            for kiter119, viter120 in self.ScratchPad.items():
                oprot.writeString(kiter119.encode('utf-8') if sys.version_info[0] == 2 else kiter119)
                oprot.writeString(viter120.encode('utf-8') if sys.version_info[0] == 2 else viter120)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.DateTimeStamp is not None:
            oprot.writeFieldBegin('DateTimeStamp', TType.STRING, 12)
            oprot.writeString(self.DateTimeStamp.encode('utf-8') if sys.version_info[0] == 2 else self.DateTimeStamp)
            oprot.writeFieldEnd()
        if self.AgeInMilliseconds is not None:
            oprot.writeFieldBegin('AgeInMilliseconds', TType.I64, 13)
            oprot.writeI64(self.AgeInMilliseconds)
            oprot.writeFieldEnd()
        if self.SignedInUser is not None:
            oprot.writeFieldBegin('SignedInUser', TType.STRUCT, 14)
            self.SignedInUser.write(oprot)
            oprot.writeFieldEnd()
        if self.HasUserCreatedTheRelation is not None:
            oprot.writeFieldBegin('HasUserCreatedTheRelation', TType.BOOL, 15)
            oprot.writeBool(self.HasUserCreatedTheRelation)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.SET, 16)
            oprot.writeSetBegin(TType.STRING, len(self.Type))
            for iter121 in self.Type:
                oprot.writeString(iter121.encode('utf-8') if sys.version_info[0] == 2 else iter121)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.GraphID is None:
            raise TProtocolException(message='Required field GraphID is unset!')
        if self.AoKID is None:
            raise TProtocolException(message='Required field AoKID is unset!')
        if self.SubjectSpecializationOf is None:
            raise TProtocolException(message='Required field SubjectSpecializationOf is unset!')
        if self.NameLabels is None:
            raise TProtocolException(message='Required field NameLabels is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGraph(object):
    """
    Attributes:
     - Neo4jID
     - GraphID
     - AoKID
     - SubjectSpecializationOf
     - NameLabels
     - Nodes
     - Relations
     - RepresentationType
     - Type
     - ScratchPad
     - DateTimeStamp
     - AgeInMilliseconds
     - SignedInUser
     - HasUserCreatedTheGraph
    """


    def __init__(self, Neo4jID=None, GraphID=None, AoKID=None, SubjectSpecializationOf=None, NameLabels=None, Nodes=None, Relations=None, RepresentationType=None, Type=None, ScratchPad=None, DateTimeStamp=None, AgeInMilliseconds=None, SignedInUser=None, HasUserCreatedTheGraph=None,):
        self.Neo4jID = Neo4jID
        self.GraphID = GraphID
        self.AoKID = AoKID
        self.SubjectSpecializationOf = SubjectSpecializationOf
        self.NameLabels = NameLabels
        self.Nodes = Nodes
        self.Relations = Relations
        self.RepresentationType = RepresentationType
        self.Type = Type
        self.ScratchPad = ScratchPad
        self.DateTimeStamp = DateTimeStamp
        self.AgeInMilliseconds = AgeInMilliseconds
        self.SignedInUser = SignedInUser
        self.HasUserCreatedTheGraph = HasUserCreatedTheGraph

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Neo4jID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.GraphID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.AoKID = set()
                    (_etype125, _size122) = iprot.readSetBegin()
                    for _i126 in range(_size122):
                        _elem127 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.AoKID.add(_elem127)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.SubjectSpecializationOf = []
                    (_etype131, _size128) = iprot.readListBegin()
                    for _i132 in range(_size128):
                        _elem133 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.SubjectSpecializationOf.append(_elem133)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.SET:
                    self.NameLabels = set()
                    (_etype137, _size134) = iprot.readSetBegin()
                    for _i138 in range(_size134):
                        _elem139 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.NameLabels.add(_elem139)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.Nodes = {}
                    (_ktype141, _vtype142, _size140) = iprot.readMapBegin()
                    for _i144 in range(_size140):
                        _key145 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val146 = TNode()
                        _val146.read(iprot)
                        self.Nodes[_key145] = _val146
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.Relations = {}
                    (_ktype148, _vtype149, _size147) = iprot.readMapBegin()
                    for _i151 in range(_size147):
                        _key152 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val153 = TRelation()
                        _val153.read(iprot)
                        self.Relations[_key152] = _val153
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.RepresentationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.SET:
                    self.Type = set()
                    (_etype157, _size154) = iprot.readSetBegin()
                    for _i158 in range(_size154):
                        _elem159 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Type.add(_elem159)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.ScratchPad = {}
                    (_ktype161, _vtype162, _size160) = iprot.readMapBegin()
                    for _i164 in range(_size160):
                        _key165 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val166 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ScratchPad[_key165] = _val166
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.DateTimeStamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.AgeInMilliseconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.SignedInUser = TUser()
                    self.SignedInUser.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.HasUserCreatedTheGraph = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGraph')
        if self.Neo4jID is not None:
            oprot.writeFieldBegin('Neo4jID', TType.STRING, 1)
            oprot.writeString(self.Neo4jID.encode('utf-8') if sys.version_info[0] == 2 else self.Neo4jID)
            oprot.writeFieldEnd()
        if self.GraphID is not None:
            oprot.writeFieldBegin('GraphID', TType.STRING, 2)
            oprot.writeString(self.GraphID.encode('utf-8') if sys.version_info[0] == 2 else self.GraphID)
            oprot.writeFieldEnd()
        if self.AoKID is not None:
            oprot.writeFieldBegin('AoKID', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.AoKID))
            for iter167 in self.AoKID:
                oprot.writeString(iter167.encode('utf-8') if sys.version_info[0] == 2 else iter167)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.SubjectSpecializationOf is not None:
            oprot.writeFieldBegin('SubjectSpecializationOf', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.SubjectSpecializationOf))
            for iter168 in self.SubjectSpecializationOf:
                oprot.writeString(iter168.encode('utf-8') if sys.version_info[0] == 2 else iter168)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.NameLabels is not None:
            oprot.writeFieldBegin('NameLabels', TType.SET, 5)
            oprot.writeSetBegin(TType.STRING, len(self.NameLabels))
            for iter169 in self.NameLabels:
                oprot.writeString(iter169.encode('utf-8') if sys.version_info[0] == 2 else iter169)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.Nodes is not None:
            oprot.writeFieldBegin('Nodes', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Nodes))
            for kiter170, viter171 in self.Nodes.items():
                oprot.writeString(kiter170.encode('utf-8') if sys.version_info[0] == 2 else kiter170)
                viter171.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Relations is not None:
            oprot.writeFieldBegin('Relations', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.Relations))
            for kiter172, viter173 in self.Relations.items():
                oprot.writeString(kiter172.encode('utf-8') if sys.version_info[0] == 2 else kiter172)
                viter173.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.RepresentationType is not None:
            oprot.writeFieldBegin('RepresentationType', TType.I32, 8)
            oprot.writeI32(self.RepresentationType)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.SET, 9)
            oprot.writeSetBegin(TType.STRING, len(self.Type))
            for iter174 in self.Type:
                oprot.writeString(iter174.encode('utf-8') if sys.version_info[0] == 2 else iter174)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.ScratchPad is not None:
            oprot.writeFieldBegin('ScratchPad', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ScratchPad))
            for kiter175, viter176 in self.ScratchPad.items():
                oprot.writeString(kiter175.encode('utf-8') if sys.version_info[0] == 2 else kiter175)
                oprot.writeString(viter176.encode('utf-8') if sys.version_info[0] == 2 else viter176)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.DateTimeStamp is not None:
            oprot.writeFieldBegin('DateTimeStamp', TType.STRING, 11)
            oprot.writeString(self.DateTimeStamp.encode('utf-8') if sys.version_info[0] == 2 else self.DateTimeStamp)
            oprot.writeFieldEnd()
        if self.AgeInMilliseconds is not None:
            oprot.writeFieldBegin('AgeInMilliseconds', TType.I64, 12)
            oprot.writeI64(self.AgeInMilliseconds)
            oprot.writeFieldEnd()
        if self.SignedInUser is not None:
            oprot.writeFieldBegin('SignedInUser', TType.STRUCT, 13)
            self.SignedInUser.write(oprot)
            oprot.writeFieldEnd()
        if self.HasUserCreatedTheGraph is not None:
            oprot.writeFieldBegin('HasUserCreatedTheGraph', TType.BOOL, 14)
            oprot.writeBool(self.HasUserCreatedTheGraph)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.GraphID is None:
            raise TProtocolException(message='Required field GraphID is unset!')
        if self.AoKID is None:
            raise TProtocolException(message='Required field AoKID is unset!')
        if self.SubjectSpecializationOf is None:
            raise TProtocolException(message='Required field SubjectSpecializationOf is unset!')
        if self.NameLabels is None:
            raise TProtocolException(message='Required field NameLabels is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TUser)
TUser.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'UserID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'UserName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'AppKey', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'RegisteredDevices', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(TEndPoint)
TEndPoint.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Host', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Port', None, None, ),  # 2
    (3, TType.STRING, 'NodeName', 'UTF8', None, ),  # 3
)
all_structs.append(TNode)
TNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.SET, 'GraphID', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.SET, 'AoKID', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'SubjectSpecializationOf', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.SET, 'NameLabels', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.I32, 'SystemLevelType', None, None, ),  # 6
    (7, TType.I32, 'AbstractionLevel', None, None, ),  # 7
    (8, TType.STRING, 'Validity', 'UTF8', None, ),  # 8
    (9, TType.MAP, 'TruthValue', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 9
    (10, TType.DOUBLE, 'Evaluation', None, None, ),  # 10
    (11, TType.STRING, 'DateTimeStamp', 'UTF8', None, ),  # 11
    (12, TType.I64, 'AgeInMilliseconds', None, None, ),  # 12
    (13, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 13
    (14, TType.MAP, 'ScratchPad', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 14
    (15, TType.STRUCT, 'SignedInUser', [TUser, None], None, ),  # 15
    (16, TType.BOOL, 'HasUserCreatedTheNode', None, None, ),  # 16
    (17, TType.MAP, 'Type', (TType.STRING, 'UTF8', TType.SET, (TType.STRING, 'UTF8', False), False), None, ),  # 17
)
all_structs.append(TRelation)
TRelation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.SET, 'GraphID', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.SET, 'AoKID', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'SubjectSpecializationOf', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.SET, 'NameLabels', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'RelationType', 'UTF8', None, ),  # 6
    (7, TType.STRUCT, 'SourceNode', [TNode, None], None, ),  # 7
    (8, TType.STRUCT, 'TargetNode', [TNode, None], None, ),  # 8
    (9, TType.DOUBLE, 'AttentionLevel', None, None, ),  # 9
    (10, TType.MAP, 'TruthValue', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 10
    (11, TType.MAP, 'ScratchPad', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.STRING, 'DateTimeStamp', 'UTF8', None, ),  # 12
    (13, TType.I64, 'AgeInMilliseconds', None, None, ),  # 13
    (14, TType.STRUCT, 'SignedInUser', [TUser, None], None, ),  # 14
    (15, TType.BOOL, 'HasUserCreatedTheRelation', None, None, ),  # 15
    (16, TType.SET, 'Type', (TType.STRING, 'UTF8', False), None, ),  # 16
)
all_structs.append(TGraph)
TGraph.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Neo4jID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'GraphID', 'UTF8', None, ),  # 2
    (3, TType.SET, 'AoKID', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'SubjectSpecializationOf', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.SET, 'NameLabels', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'Nodes', (TType.STRING, 'UTF8', TType.STRUCT, [TNode, None], False), None, ),  # 6
    (7, TType.MAP, 'Relations', (TType.STRING, 'UTF8', TType.STRUCT, [TRelation, None], False), None, ),  # 7
    (8, TType.I32, 'RepresentationType', None, None, ),  # 8
    (9, TType.SET, 'Type', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.MAP, 'ScratchPad', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.STRING, 'DateTimeStamp', 'UTF8', None, ),  # 11
    (12, TType.I64, 'AgeInMilliseconds', None, None, ),  # 12
    (13, TType.STRUCT, 'SignedInUser', [TUser, None], None, ),  # 13
    (14, TType.BOOL, 'HasUserCreatedTheGraph', None, None, ),  # 14
)
fix_spec(all_structs)
del all_structs
